{
  "address": "0x51649289e1C421AC9157d98F2aabc08a435Ed722",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_linkTokenContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_promiseFactoryContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ContractFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "VerificationFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "VerificationRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "verified",
          "type": "bool"
        }
      ],
      "name": "VerificationSuccessful",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "addressToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_username",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_verified",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "fulfillVerification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "fundContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLinkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracleJobId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOraclePayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPromiseFactoryContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_username",
          "type": "string"
        }
      ],
      "name": "requestVerification",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_oracleJobId",
          "type": "bytes32"
        }
      ],
      "name": "setOracleJobId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_promiseFactoryContract",
          "type": "address"
        }
      ],
      "name": "setPromiseFactoryContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc3398c1fc2275b69de00def0eafc8188b259f74d947a4607f633f07a1fa8cc31",
  "receipt": {
    "to": null,
    "from": "0xc06d127E504a944f63Bc750D8F512556c576F3EF",
    "contractAddress": "0x51649289e1C421AC9157d98F2aabc08a435Ed722",
    "transactionIndex": 16,
    "gasUsed": "2878183",
    "logsBloom": "0x
    "blockHash": "0x2391308e3163ce235fbe39b4ba1b4a35705e29b7018f0b9658985304415194d6",
    "transactionHash": "0xc3398c1fc2275b69de00def0eafc8188b259f74d947a4607f633f07a1fa8cc31",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 28888682,
        "transactionHash": "0xc3398c1fc2275b69de00def0eafc8188b259f74d947a4607f633f07a1fa8cc31",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c06d127e504a944f63bc750d8f512556c576f3ef",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000020c12f36ede5ef0000000000000000000000000000000000000000000000001c05653c0867d30800000000000000000000000000000000000000000000173368c536e2803146100000000000000000000000000000000000000000000000001be4a40cd179ed1900000000000000000000000000000000000000000000173368e5f811b71f2bff",
        "logIndex": 92,
        "blockHash": "0x2391308e3163ce235fbe39b4ba1b4a35705e29b7018f0b9658985304415194d6"
      }
    ],
    "blockNumber": 28888682,
    "cumulativeGasUsed": "5325570",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0x2BB8Dd9C16edeF313eb9ccBd5F42A8b577cB1E3c",
    "0x9a26cA9509C6E2bBE7CcB59A1fbbfcf9DFf37f60"
  ],
  "numDeployments": 8,
  "solcInputHash": "100f89b4a0e41d0c5dcbeeb976f9976f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkTokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_promiseFactoryContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ContractFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"VerificationFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"VerificationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"name\":\"VerificationSuccessful\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addressToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_verified\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"fulfillVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleJobId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOraclePayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPromiseFactoryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"requestVerification\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_oracleJobId\",\"type\":\"bytes32\"}],\"name\":\"setOracleJobId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_promiseFactoryContract\",\"type\":\"address\"}],\"name\":\"setPromiseFactoryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"polarzero\",\"kind\":\"dev\",\"methods\":{\"addressToString(address)\":{\"params\":{\"_addr\":\"The address to convert\"}},\"constructor\":{\"params\":{\"_linkTokenContract\":\"(Mumbai): 0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\"_oracleContract\":\"(Mumbai): 0x2BB8Dd9C16edeF313eb9ccBd5F42A8b577cB1E3c\",\"_promiseFactoryContract\":\": The address of the PromiseFactory contract\"}},\"fulfillVerification(bytes32,string,bool,address)\":{\"params\":{\"_requestId\":\"The request ID\",\"_username\":\"The username to verify\",\"_verified\":\"The verification result\"}},\"requestVerification(string)\":{\"params\":{\"_username\":\"The username to verify\"}},\"setPromiseFactoryContract(address)\":{\"details\":\"It also sets the promise factory contract interface with this address\",\"params\":{\"_promiseFactoryContract\":\"The address of the PromiseFactory contract\"}}},\"title\":\"VerifyTwitter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"addressToString(address)\":{\"notice\":\"Convert address to string\"},\"constructor\":{\"notice\":\"Initialize the link token and target oracle\"},\"fulfillVerification(bytes32,string,bool,address)\":{\"notice\":\"Callback function used by the oracle to return the verification result\"},\"fundContract(uint256)\":{\"notice\":\"Fund the contract with LINK and emit an event\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"requestVerification(string)\":{\"notice\":\"Request a Twitter username to be verified\"},\"setPromiseFactoryContract(address)\":{\"notice\":\"Call the promise factory contract to verify a Twitter account\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"},\"withdrawLink()\":{\"notice\":\"Withdraw LINK from this contract\"}},\"notice\":\"Sends a request to the Chainlink oracle to verify a Twitter account - The oracle will return the username, address, and verification status - It uses a Chainlink node & an external adapter to interact with the Twitter API\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VerifyTwitter.sol\":\"VerifyTwitter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"contracts/IPromiseFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IPromiseFactory {\\n    function addTwitterVerifiedUser(\\n        address _userAddress,\\n        string memory _username\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfe5f4996e4c0cb01ce1f2457d3069fc8a42ece2dd7b4b8e205ee39b15dbd7fa1\",\"license\":\"MIT\"},\"contracts/VerifyTwitter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./IPromiseFactory.sol\\\";\\n\\n/**\\n * @author polarzero\\n * @title VerifyTwitter\\n * @notice Sends a request to the Chainlink oracle to verify a Twitter account\\n * - The oracle will return the username, address, and verification status\\n * - It uses a Chainlink node & an external adapter to interact with the Twitter API\\n */\\n\\ncontract VerifyTwitter is ChainlinkClient, ConfirmedOwner {\\n    using Chainlink for Chainlink.Request;\\n\\n    // Chainlink variables\\n    uint256 private constant ORACLE_PAYMENT = (1 * LINK_DIVISIBILITY) / 10; // 0.1 LINK\\n    bytes32 private s_oracleJobId = \\\"2adee90f8a864ae1ab4138d06d99a80f\\\";\\n\\n    // Declare the PromiseFactory contract address and the interface\\n    address private s_promiseFactoryContract;\\n    IPromiseFactory private s_promiseFactoryInterface;\\n\\n    // Variables returned by the oracle\\n    string private s_username;\\n    address private s_userAddress;\\n    bool private s_verified = false;\\n\\n    // Events\\n    event VerificationRequested(bytes32 indexed requestId, string username);\\n    event VerificationFailed(bytes32 indexed requestId, string username);\\n    event VerificationSuccessful(\\n        bytes32 indexed requestId,\\n        string username,\\n        address userAddress,\\n        bool verified\\n    );\\n    event FundsWithdrawn(uint256 amount);\\n    event ContractFunded(address funder, uint256 amount);\\n\\n    /**\\n     * @notice Initialize the link token and target oracle\\n     * @param _linkTokenContract (Mumbai): 0x326C977E6efc84E512bB9C30f76E30c160eD06FB\\n     * @param _oracleContract (Mumbai): 0x2BB8Dd9C16edeF313eb9ccBd5F42A8b577cB1E3c\\n     * @param _promiseFactoryContract: The address of the PromiseFactory contract\\n     */\\n\\n    constructor(\\n        address _linkTokenContract,\\n        address _oracleContract,\\n        address _promiseFactoryContract\\n    ) ConfirmedOwner(msg.sender) {\\n        setChainlinkToken(_linkTokenContract);\\n        setChainlinkOracle(_oracleContract);\\n        setPromiseFactoryContract(_promiseFactoryContract);\\n    }\\n\\n    /**\\n     * @notice Request a Twitter username to be verified\\n     * @param _username The username to verify\\n     */\\n\\n    function requestVerification(string memory _username)\\n        public\\n        returns (bytes32 requestId)\\n    {\\n        Chainlink.Request memory req = buildChainlinkRequest(\\n            s_oracleJobId,\\n            address(this),\\n            this.fulfillVerification.selector\\n        );\\n        string memory userAddress = addressToString(msg.sender);\\n\\n        // Generate a signature with\\n        // \\\"Verifying my Twitter account for ETH address <address>\\\" as the message\\n        // It will prevent the signature from being passed as a parameter\\n        string memory signature = string(\\n            abi.encodePacked(\\n                \\\"Verifying my Twitter account for ETH address \\\",\\n                userAddress\\n            )\\n        );\\n\\n        req.add(\\\"username\\\", _username);\\n        req.add(\\\"signature\\\", signature);\\n        req.add(\\\"address\\\", userAddress);\\n        // req.add(\\\"copyPath1\\\", \\\"data,username\\\"); // username (string)\\n        // req.add(\\\"copyPath2\\\", \\\"data,result\\\"); // verified (bool)\\n        // req.add(\\\"copyPath3\\\", \\\"data,userAddress\\\"); // user address (msg.sender here) (address)\\n        requestId = sendOperatorRequest(req, ORACLE_PAYMENT);\\n\\n        emit VerificationRequested(requestId, _username);\\n    }\\n\\n    /**\\n     * @notice Callback function used by the oracle to return the verification result\\n     * @param _requestId The request ID\\n     * @param _username The username to verify\\n     * @param _verified The verification result\\n     */\\n\\n    function fulfillVerification(\\n        bytes32 _requestId,\\n        string memory _username,\\n        bool _verified,\\n        address _userAddress\\n    ) public recordChainlinkFulfillment(_requestId) {\\n        s_username = _username;\\n        s_userAddress = _userAddress;\\n        s_verified = _verified;\\n\\n        if (_verified) {\\n            // It's ok if the user already have a verified account, they can still verify another one\\n            // Call the PromiseFactory contract to verify the user\\n            // Which will map their address to their verified Twitter username(s)\\n            s_promiseFactoryInterface.addTwitterVerifiedUser(\\n                _userAddress,\\n                _username\\n            );\\n\\n            emit VerificationSuccessful(\\n                _requestId,\\n                _username,\\n                _userAddress,\\n                _verified\\n            );\\n        } else {\\n            emit VerificationFailed(_requestId, _username);\\n        }\\n    }\\n\\n    /**\\n     * @notice Call the promise factory contract to verify a Twitter account\\n     * @dev It also sets the promise factory contract interface with this address\\n     * @param _promiseFactoryContract The address of the PromiseFactory contract\\n     */\\n\\n    function setPromiseFactoryContract(address _promiseFactoryContract)\\n        public\\n        onlyOwner\\n    {\\n        s_promiseFactoryContract = _promiseFactoryContract;\\n        s_promiseFactoryInterface = IPromiseFactory(_promiseFactoryContract);\\n    }\\n\\n    function setOracleJobId(bytes32 _oracleJobId) public onlyOwner {\\n        s_oracleJobId = _oracleJobId;\\n    }\\n\\n    /**\\n     * @notice Convert address to string\\n     * @param _addr The address to convert\\n     */\\n\\n    function addressToString(address _addr)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        bytes32 value = bytes32(uint256(uint160(_addr)));\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n        bytes memory str = new bytes(42);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(str);\\n    }\\n\\n    /**\\n     * @notice Withdraw LINK from this contract\\n     */\\n\\n    function withdrawLink() public onlyOwner {\\n        LinkTokenInterface linkToken = LinkTokenInterface(\\n            chainlinkTokenAddress()\\n        );\\n        uint256 balance = linkToken.balanceOf(address(this));\\n\\n        (bool success, ) = address(this).call(\\n            abi.encodeWithSelector(\\n                linkToken.transfer.selector,\\n                msg.sender,\\n                linkToken.balanceOf(address(this))\\n            )\\n        );\\n        require(success, \\\"Unable to transfer\\\");\\n\\n        emit FundsWithdrawn(balance);\\n    }\\n\\n    /**\\n     * @notice Fund the contract with LINK and emit an event\\n     */\\n\\n    function fundContract(uint256 _amount) public {\\n        LinkTokenInterface linkToken = LinkTokenInterface(\\n            chainlinkTokenAddress()\\n        );\\n\\n        // First approve the contract to spend the LINK from the sender\\n        (bool approveSuccess, ) = address(this).call(\\n            abi.encodeWithSelector(\\n                linkToken.approve.selector,\\n                address(this),\\n                _amount\\n            )\\n        );\\n        require(approveSuccess, \\\"Unable to approve\\\");\\n\\n        (bool transferSuccess, ) = address(this).call(\\n            abi.encodeWithSelector(\\n                linkToken.transferFrom.selector,\\n                msg.sender,\\n                address(this),\\n                _amount\\n            )\\n        );\\n        require(transferSuccess, \\\"Unable to transfer\\\");\\n\\n        emit ContractFunded(msg.sender, _amount);\\n    }\\n\\n    // Getters\\n\\n    function getOracleJobId() public view returns (bytes32) {\\n        return s_oracleJobId;\\n    }\\n\\n    function getPromiseFactoryContract() public view returns (address) {\\n        return s_promiseFactoryContract;\\n    }\\n\\n    function getOraclePayment() public pure returns (uint256) {\\n        return ORACLE_PAYMENT;\\n    }\\n\\n    function getLinkBalance() public view returns (uint256) {\\n        LinkTokenInterface linkToken = LinkTokenInterface(\\n            chainlinkTokenAddress()\\n        );\\n        return linkToken.balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x7717e13a1e76c8696a40f6ce0d1363a7c009b79e282484c14c4ff20c7ee74228\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806372c0c0a81161008c5780638dc654a2116100665780638dc654a214610225578063c78613da1461022f578063df9776cf1461024d578063f2fde38b14610269576100ea565b806372c0c0a8146101df57806379ba5097146101fd5780638da5cb5b14610207576100ea565b806350c5f975116100c857806350c5f975146101435780635e57966d146101615780636986f2e9146101915780636cbff42a146101af576100ea565b80632bde7979146100ef5780633519a2f81461010b578063435a7b9014610127575b600080fd5b61010960048036038101906101049190611ed3565b610285565b005b61012560048036038101906101209190611f8c565b61050b565b005b610141600480360381019061013c9190611fb9565b6107a0565b005b61014b61082d565b6040516101589190611ff5565b60405180910390f35b61017b60048036038101906101769190611fb9565b6108ba565b604051610188919061208f565b60405180910390f35b610199610bc5565b6040516101a69190611ff5565b60405180910390f35b6101c960048036038101906101c491906120b1565b610bed565b6040516101d69190612109565b60405180910390f35b6101e7610d81565b6040516101f49190612133565b60405180910390f35b610205610dab565b005b61020f610f42565b60405161021c9190612133565b60405180910390f35b61022d610f6c565b005b6102376111d7565b6040516102449190612109565b60405180910390f35b6102676004803603810190610262919061214e565b6111e1565b005b610283600480360381019061027e9190611fb9565b6111f3565b005b836005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610327576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031e906121ed565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a283600b90816103999190612419565b5081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600c60146101000a81548160ff02191690831515021790555082156104cb57600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e31db57383866040518363ffffffff1660e01b81526004016104589291906124eb565b600060405180830381600087803b15801561047257600080fd5b505af1158015610486573d6000803e3d6000fd5b50505050847f11e51421fae5ce18b197a586401e292b3e0a8b6108ae67ade651f8bfbb7360308584866040516104be9392919061252a565b60405180910390a2610504565b847f1b274bac0e8bb49d3ad90709790a3bf2aa1b86313b4c1a7ae5af9cb7832f7204856040516104fb919061208f565b60405180910390a25b5050505050565b6000610515611207565b905060003073ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b308560405160240161054b929190612568565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105b591906125d8565b6000604051808303816000865af19150503d80600081146105f2576040519150601f19603f3d011682016040523d82523d6000602084013e6105f7565b606091505b505090508061063b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106329061263b565b60405180910390fd5b60003073ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b3330876040516024016106719392919061265b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516106db91906125d8565b6000604051808303816000865af19150503d8060008114610718576040519150601f19603f3d011682016040523d82523d6000602084013e61071d565b606091505b5050905080610761576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610758906126de565b60405180910390fd5b7f0939f6f4877faf071412e527bc4c6d0bd65ad077e52b57334f7765265647a7f13385604051610792929190612568565b60405180910390a150505050565b6107a8611231565b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080610838611207565b90508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108739190612133565b602060405180830381865afa158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b49190612713565b91505090565b606060008273ffffffffffffffffffffffffffffffffffffffff1660001b905060006040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506000602a67ffffffffffffffff81111561093157610930611d12565b5b6040519080825280601f01601f1916602001820160405280156109635781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061099b5761099a612740565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106109ff576109fe612740565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b6014811015610bb95782600485600c84610a4b919061279e565b60208110610a5c57610a5b612740565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110610a9b57610a9a612740565b5b602001015160f81c60f81b82600283610ab491906127d2565b6002610ac0919061279e565b81518110610ad157610ad0612740565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b85600c84610b14919061279e565b60208110610b2557610b24612740565b5b1a60f81b1660f81c60ff1681518110610b4157610b40612740565b5b602001015160f81c60f81b82600283610b5a91906127d2565b6003610b66919061279e565b81518110610b7757610b76612740565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610bb19061282c565b915050610a31565b50809350505050919050565b6000600a670de0b6b3a76400006001610bde91906127d2565b610be891906128a3565b905090565b600080610c0460085430632bde797960e01b6112c3565b90506000610c11336108ba565b9050600081604051602001610c269190612982565b6040516020818303038152906040529050610c816040518060400160405280600881526020017f757365726e616d6500000000000000000000000000000000000000000000000081525086856112f49092919063ffffffff16565b610ccb6040518060400160405280600981526020017f7369676e6174757265000000000000000000000000000000000000000000000081525082856112f49092919063ffffffff16565b610d156040518060400160405280600781526020017f616464726573730000000000000000000000000000000000000000000000000081525083856112f49092919063ffffffff16565b610d3f83600a670de0b6b3a76400006001610d3091906127d2565b610d3a91906128a3565b611327565b9350837fc34ceda1e3b95f3c685a13629829c6cd83b0804b62f6362feaef6c1e61e740ca86604051610d71919061208f565b60405180910390a2505050919050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e32906129f0565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610f74611231565b6000610f7e611207565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fbb9190612133565b602060405180830381865afa158015610fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffc9190612713565b905060003073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b338573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110599190612133565b602060405180830381865afa158015611076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109a9190612713565b6040516024016110ab929190612568565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161111591906125d8565b6000604051808303816000865af19150503d8060008114611152576040519150601f19603f3d011682016040523d82523d6000602084013e611157565b606091505b505090508061119b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611192906126de565b60405180910390fd5b7f4a37b25aab49761ecf63117fe82b98d750917451133cf797507bc9fb5b96044a826040516111ca9190611ff5565b60405180910390a1505050565b6000600854905090565b6111e9611231565b8060088190555050565b6111fb611231565b6112048161135e565b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b890612a5c565b60405180910390fd5b565b6112cb611c26565b6112d3611c26565b6112ea8585858461148c909392919063ffffffff16565b9150509392505050565b61130b82846080015161153c90919063ffffffff16565b61132281846080015161153c90919063ffffffff16565b505050565b6000611356600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484611561565b905092915050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c390612ac8565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b611494611c26565b6114a4856080015161010061162b565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b6115498260038351611695565b61155c818361181a90919063ffffffff16565b505050565b6000806004549050600181611576919061279e565b6004819055506000633c6d41b960e01b600080876000015188604001518660028b60800151600001516040516024016115b59796959493929190612b6d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506116208683868461183c565b925050509392505050565b611633611c93565b60006020836116429190612be3565b1461166e576020826116549190612be3565b60206116609190612c14565b8261166b919061279e565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff16116116cc576116c68160058460ff16901b60ff1617846119d190919063ffffffff16565b50611815565b60ff8167ffffffffffffffff1611611722576116fb601860058460ff16901b17846119d190919063ffffffff16565b5061171c8167ffffffffffffffff166001856119f19092919063ffffffff16565b50611814565b61ffff8167ffffffffffffffff161161177957611752601960058460ff16901b17846119d190919063ffffffff16565b506117738167ffffffffffffffff166002856119f19092919063ffffffff16565b50611813565b63ffffffff8167ffffffffffffffff16116117d2576117ab601a60058460ff16901b17846119d190919063ffffffff16565b506117cc8167ffffffffffffffff166004856119f19092919063ffffffff16565b50611812565b6117ef601b60058460ff16901b17846119d190919063ffffffff16565b506118108167ffffffffffffffff166008856119f19092919063ffffffff16565b505b5b5b5b505050565b611822611c93565b61183483846000015151848551611a13565b905092915050565b60003084604051602001611851929190612cf7565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b815260040161194793929190612d23565b6020604051808303816000875af1158015611966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198a9190612d76565b6119c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c090612e15565b60405180910390fd5b949350505050565b6119d9611c93565b6119e98384600001515184611b02565b905092915050565b6119f9611c93565b611a0a848560000151518585611b58565b90509392505050565b611a1b611c93565b8251821115611a2957600080fd5b84602001518285611a3a919061279e565b1115611a6f57611a6e856002611a5f88602001518887611a5a919061279e565b611be6565b611a6991906127d2565b611c02565b5b600080865180518760208301019350808887011115611a8e5787860182525b60208701925050505b60208410611ad55780518252602082611ab0919061279e565b9150602081611abf919061279e565b9050602084611ace9190612c14565b9350611a97565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b611b0a611c93565b83602001518310611b3057611b2f8460028660200151611b2a91906127d2565b611c02565b5b83518051602085830101848153818603611b4b576001820183525b5050508390509392505050565b611b60611c93565b84602001518483611b71919061279e565b1115611b9957611b988560028685611b89919061279e565b611b9391906127d2565b611c02565b5b6000600183610100611bab9190612f68565b611bb59190612c14565b90508551838682010185831982511617815281518588011115611bd85784870182525b505085915050949350505050565b600081831115611bf857829050611bfc565b8190505b92915050565b600082600001519050611c15838361162b565b50611c20838261181a565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200160008152602001611c8d611c93565b81525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611cd481611cc1565b8114611cdf57600080fd5b50565b600081359050611cf181611ccb565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d4a82611d01565b810181811067ffffffffffffffff82111715611d6957611d68611d12565b5b80604052505050565b6000611d7c611cad565b9050611d888282611d41565b919050565b600067ffffffffffffffff821115611da857611da7611d12565b5b611db182611d01565b9050602081019050919050565b82818337600083830152505050565b6000611de0611ddb84611d8d565b611d72565b905082815260208101848484011115611dfc57611dfb611cfc565b5b611e07848285611dbe565b509392505050565b600082601f830112611e2457611e23611cf7565b5b8135611e34848260208601611dcd565b91505092915050565b60008115159050919050565b611e5281611e3d565b8114611e5d57600080fd5b50565b600081359050611e6f81611e49565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ea082611e75565b9050919050565b611eb081611e95565b8114611ebb57600080fd5b50565b600081359050611ecd81611ea7565b92915050565b60008060008060808587031215611eed57611eec611cb7565b5b6000611efb87828801611ce2565b945050602085013567ffffffffffffffff811115611f1c57611f1b611cbc565b5b611f2887828801611e0f565b9350506040611f3987828801611e60565b9250506060611f4a87828801611ebe565b91505092959194509250565b6000819050919050565b611f6981611f56565b8114611f7457600080fd5b50565b600081359050611f8681611f60565b92915050565b600060208284031215611fa257611fa1611cb7565b5b6000611fb084828501611f77565b91505092915050565b600060208284031215611fcf57611fce611cb7565b5b6000611fdd84828501611ebe565b91505092915050565b611fef81611f56565b82525050565b600060208201905061200a6000830184611fe6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561204a57808201518184015260208101905061202f565b60008484015250505050565b600061206182612010565b61206b818561201b565b935061207b81856020860161202c565b61208481611d01565b840191505092915050565b600060208201905081810360008301526120a98184612056565b905092915050565b6000602082840312156120c7576120c6611cb7565b5b600082013567ffffffffffffffff8111156120e5576120e4611cbc565b5b6120f184828501611e0f565b91505092915050565b61210381611cc1565b82525050565b600060208201905061211e60008301846120fa565b92915050565b61212d81611e95565b82525050565b60006020820190506121486000830184612124565b92915050565b60006020828403121561216457612163611cb7565b5b600061217284828501611ce2565b91505092915050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b60006121d760288361201b565b91506121e28261217b565b604082019050919050565b60006020820190508181036000830152612206816121ca565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061225457607f821691505b6020821081036122675761226661220d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026122cf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612292565b6122d98683612292565b95508019841693508086168417925050509392505050565b6000819050919050565b600061231661231161230c84611f56565b6122f1565b611f56565b9050919050565b6000819050919050565b612330836122fb565b61234461233c8261231d565b84845461229f565b825550505050565b600090565b61235961234c565b612364818484612327565b505050565b5b818110156123885761237d600082612351565b60018101905061236a565b5050565b601f8211156123cd5761239e8161226d565b6123a784612282565b810160208510156123b6578190505b6123ca6123c285612282565b830182612369565b50505b505050565b600082821c905092915050565b60006123f0600019846008026123d2565b1980831691505092915050565b600061240983836123df565b9150826002028217905092915050565b61242282612010565b67ffffffffffffffff81111561243b5761243a611d12565b5b612445825461223c565b61245082828561238c565b600060209050601f8311600181146124835760008415612471578287015190505b61247b85826123fd565b8655506124e3565b601f1984166124918661226d565b60005b828110156124b957848901518255600182019150602085019450602081019050612494565b868310156124d657848901516124d2601f8916826123df565b8355505b6001600288020188555050505b505050505050565b60006040820190506125006000830185612124565b81810360208301526125128184612056565b90509392505050565b61252481611e3d565b82525050565b600060608201905081810360008301526125448186612056565b90506125536020830185612124565b612560604083018461251b565b949350505050565b600060408201905061257d6000830185612124565b61258a6020830184611fe6565b9392505050565b600081519050919050565b600081905092915050565b60006125b282612591565b6125bc818561259c565b93506125cc81856020860161202c565b80840191505092915050565b60006125e482846125a7565b915081905092915050565b7f556e61626c6520746f20617070726f7665000000000000000000000000000000600082015250565b600061262560118361201b565b9150612630826125ef565b602082019050919050565b6000602082019050818103600083015261265481612618565b9050919050565b60006060820190506126706000830186612124565b61267d6020830185612124565b61268a6040830184611fe6565b949350505050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b60006126c860128361201b565b91506126d382612692565b602082019050919050565b600060208201905081810360008301526126f7816126bb565b9050919050565b60008151905061270d81611f60565b92915050565b60006020828403121561272957612728611cb7565b5b6000612737848285016126fe565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127a982611f56565b91506127b483611f56565b92508282019050808211156127cc576127cb61276f565b5b92915050565b60006127dd82611f56565b91506127e883611f56565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156128215761282061276f565b5b828202905092915050565b600061283782611f56565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128695761286861276f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006128ae82611f56565b91506128b983611f56565b9250826128c9576128c8612874565b5b828204905092915050565b600081905092915050565b7f566572696679696e67206d792054776974746572206163636f756e7420666f7260008201527f2045544820616464726573732000000000000000000000000000000000000000602082015250565b600061293b602d836128d4565b9150612946826128df565b602d82019050919050565b600061295c82612010565b61296681856128d4565b935061297681856020860161202c565b80840191505092915050565b600061298d8261292e565b91506129998284612951565b915081905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006129da60168361201b565b91506129e5826129a4565b602082019050919050565b60006020820190508181036000830152612a09816129cd565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000612a4660168361201b565b9150612a5182612a10565b602082019050919050565b60006020820190508181036000830152612a7581612a39565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000612ab260178361201b565b9150612abd82612a7c565b602082019050919050565b60006020820190508181036000830152612ae181612aa5565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612b1d81612ae8565b82525050565b600082825260208201905092915050565b6000612b3f82612591565b612b498185612b23565b9350612b5981856020860161202c565b612b6281611d01565b840191505092915050565b600060e082019050612b82600083018a612124565b612b8f6020830189611fe6565b612b9c60408301886120fa565b612ba96060830187612b14565b612bb66080830186611fe6565b612bc360a0830185611fe6565b81810360c0830152612bd58184612b34565b905098975050505050505050565b6000612bee82611f56565b9150612bf983611f56565b925082612c0957612c08612874565b5b828206905092915050565b6000612c1f82611f56565b9150612c2a83611f56565b9250828203905081811115612c4257612c4161276f565b5b92915050565b6000612c63612c5e612c5984611e75565b6122f1565b611e75565b9050919050565b6000612c7582612c48565b9050919050565b6000612c8782612c6a565b9050919050565b60008160601b9050919050565b6000612ca682612c8e565b9050919050565b6000612cb882612c9b565b9050919050565b612cd0612ccb82612c7c565b612cad565b82525050565b6000819050919050565b612cf1612cec82611f56565b612cd6565b82525050565b6000612d038285612cbf565b601482019150612d138284612ce0565b6020820191508190509392505050565b6000606082019050612d386000830186612124565b612d456020830185611fe6565b8181036040830152612d578184612b34565b9050949350505050565b600081519050612d7081611e49565b92915050565b600060208284031215612d8c57612d8b611cb7565b5b6000612d9a84828501612d61565b91505092915050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b6000612dff60238361201b565b9150612e0a82612da3565b604082019050919050565b60006020820190508181036000830152612e2e81612df2565b9050919050565b60008160011c9050919050565b6000808291508390505b6001851115612e8c57808604811115612e6857612e6761276f565b5b6001851615612e775780820291505b8081029050612e8585612e35565b9450612e4c565b94509492505050565b600082612ea55760019050612f61565b81612eb35760009050612f61565b8160018114612ec95760028114612ed357612f02565b6001915050612f61565b60ff841115612ee557612ee461276f565b5b8360020a915084821115612efc57612efb61276f565b5b50612f61565b5060208310610133831016604e8410600b8410161715612f375782820a905083811115612f3257612f3161276f565b5b612f61565b612f448484846001612e42565b92509050818404811115612f5b57612f5a61276f565b5b81810290505b9392505050565b6000612f7382611f56565b9150612f7e83611f56565b9250612fab7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612e95565b90509291505056fea264697066735822122092a2e0f1ed2a2afeecd7eeae167552353a09e3d90636a3a4780f65262fac672364736f6c63430008100033",
  "devdoc": {
    "author": "polarzero",
    "kind": "dev",
    "methods": {
      "addressToString(address)": {
        "params": {
          "_addr": "The address to convert"
        }
      },
      "constructor": {
        "params": {
          "_linkTokenContract": "(Mumbai): 0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
          "_oracleContract": "(Mumbai): 0x2BB8Dd9C16edeF313eb9ccBd5F42A8b577cB1E3c",
          "_promiseFactoryContract": ": The address of the PromiseFactory contract"
        }
      },
      "fulfillVerification(bytes32,string,bool,address)": {
        "params": {
          "_requestId": "The request ID",
          "_username": "The username to verify",
          "_verified": "The verification result"
        }
      },
      "requestVerification(string)": {
        "params": {
          "_username": "The username to verify"
        }
      },
      "setPromiseFactoryContract(address)": {
        "details": "It also sets the promise factory contract interface with this address",
        "params": {
          "_promiseFactoryContract": "The address of the PromiseFactory contract"
        }
      }
    },
    "title": "VerifyTwitter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "addressToString(address)": {
        "notice": "Convert address to string"
      },
      "constructor": {
        "notice": "Initialize the link token and target oracle"
      },
      "fulfillVerification(bytes32,string,bool,address)": {
        "notice": "Callback function used by the oracle to return the verification result"
      },
      "fundContract(uint256)": {
        "notice": "Fund the contract with LINK and emit an event"
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "requestVerification(string)": {
        "notice": "Request a Twitter username to be verified"
      },
      "setPromiseFactoryContract(address)": {
        "notice": "Call the promise factory contract to verify a Twitter account"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      },
      "withdrawLink()": {
        "notice": "Withdraw LINK from this contract"
      }
    },
    "notice": "Sends a request to the Chainlink oracle to verify a Twitter account - The oracle will return the username, address, and verification status - It uses a Chainlink node & an external adapter to interact with the Twitter API",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/VerifyTwitter.sol:VerifyTwitter",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)1156"
      },
      {
        "astId": 321,
        "contract": "contracts/VerifyTwitter.sol:VerifyTwitter",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/VerifyTwitter.sol:VerifyTwitter",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1251"
      },
      {
        "astId": 327,
        "contract": "contracts/VerifyTwitter.sol:VerifyTwitter",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1331"
      },
      {
        "astId": 330,
        "contract": "contracts/VerifyTwitter.sol:VerifyTwitter",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/VerifyTwitter.sol:VerifyTwitter",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 889,
        "contract": "contracts/VerifyTwitter.sol:VerifyTwitter",
        "label": "s_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 891,
        "contract": "contracts/VerifyTwitter.sol:VerifyTwitter",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2409,
        "contract": "contracts/VerifyTwitter.sol:VerifyTwitter",
        "label": "s_oracleJobId",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 2411,
        "contract": "contracts/VerifyTwitter.sol:VerifyTwitter",
        "label": "s_promiseFactoryContract",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 2414,
        "contract": "contracts/VerifyTwitter.sol:VerifyTwitter",
        "label": "s_promiseFactoryInterface",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IPromiseFactory)2383"
      },
      {
        "astId": 2416,
        "contract": "contracts/VerifyTwitter.sol:VerifyTwitter",
        "label": "s_username",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 2418,
        "contract": "contracts/VerifyTwitter.sol:VerifyTwitter",
        "label": "s_userAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 2421,
        "contract": "contracts/VerifyTwitter.sol:VerifyTwitter",
        "label": "s_verified",
        "offset": 20,
        "slot": "12",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)1156": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IPromiseFactory)2383": {
        "encoding": "inplace",
        "label": "contract IPromiseFactory",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1251": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1331": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}