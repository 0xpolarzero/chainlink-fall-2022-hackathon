{
  "address": "0x5250d9a5B32f1715BDE204fb03EC5aB9FF2E05cB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_linkTokenContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_promiseFactoryContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "VerifyStorage__NOT_FACTORY",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "promiseAddress",
          "type": "address"
        }
      ],
      "name": "StorageStatusUpdateRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "promiseAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "storageStatus",
          "type": "uint8"
        }
      ],
      "name": "StorageStatusUpdateSuccessful",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_promiseAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_backupStatus",
          "type": "uint8"
        }
      ],
      "name": "fulfillStorageStatusUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLinkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracleJobId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOraclePayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPromiseFactoryContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_promiseAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_ipfsCid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_arweaveId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_encryptedProof",
          "type": "string"
        }
      ],
      "name": "requestStorageStatusUpdate",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_oracleJobId",
          "type": "bytes32"
        }
      ],
      "name": "setOracleJobId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_promiseFactoryContract",
          "type": "address"
        }
      ],
      "name": "setPromiseFactoryContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf2ead19fcfd779f319e09659370460b415c117d542460c15213d72fa054eb32e",
  "receipt": {
    "to": null,
    "from": "0xc06d127E504a944f63Bc750D8F512556c576F3EF",
    "contractAddress": "0x5250d9a5B32f1715BDE204fb03EC5aB9FF2E05cB",
    "transactionIndex": 9,
    "gasUsed": "2287914",
    "logsBloom": "0x
    "blockHash": "0x98f892ac97f3f859feda9bac29333485d57ada67926c368799f44883fe75033e",
    "transactionHash": "0xf2ead19fcfd779f319e09659370460b415c117d542460c15213d72fa054eb32e",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 29097545,
        "transactionHash": "0xf2ead19fcfd779f319e09659370460b415c117d542460c15213d72fa054eb32e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c06d127e504a944f63bc750d8f512556c576f3ef",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000c3144bb75fa82000000000000000000000000000000000000000000000000249dc55fcf0f9e71000000000000000000000000000000000000000000002756fb54d1624f922b320000000000000000000000000000000000000000000000002491941b1399a3ef000000000000000000000000000000000000000000002756fb6102a70b0825b4",
        "logIndex": 26,
        "blockHash": "0x98f892ac97f3f859feda9bac29333485d57ada67926c368799f44883fe75033e"
      }
    ],
    "blockNumber": 29097545,
    "cumulativeGasUsed": "5283369",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0xD4D1fe6FF0A871Ccf37bCfbce3135f548E5f05B5",
    "0x3d6661bc7d1D7efCcf86Cb9B3DaD46D20E7d864e"
  ],
  "numDeployments": 1,
  "solcInputHash": "73740e9959a17978dcfeef4b6bb53bf6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkTokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_promiseFactoryContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"VerifyStorage__NOT_FACTORY\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"promiseAddress\",\"type\":\"address\"}],\"name\":\"StorageStatusUpdateRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"promiseAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"storageStatus\",\"type\":\"uint8\"}],\"name\":\"StorageStatusUpdateSuccessful\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_promiseAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_backupStatus\",\"type\":\"uint8\"}],\"name\":\"fulfillStorageStatusUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleJobId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOraclePayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPromiseFactoryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_promiseAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ipfsCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_arweaveId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_encryptedProof\",\"type\":\"string\"}],\"name\":\"requestStorageStatusUpdate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_oracleJobId\",\"type\":\"bytes32\"}],\"name\":\"setOracleJobId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_promiseFactoryContract\",\"type\":\"address\"}],\"name\":\"setPromiseFactoryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"polarzero\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_linkTokenContract\":\"(Mumbai): 0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\"_oracleContract\":\"(Mumbai): 0x2BB8Dd9C16edeF313eb9ccBd5F42A8b577cB1E3c\",\"_promiseFactoryContract\":\": The address of the PromiseFactory contract\"}},\"fulfillStorageStatusUpdate(bytes32,address,uint8)\":{\"details\":\"Only the Chainlink oracle can call this function\",\"params\":{\"_backupStatus\":\"The storage status of the promise -> We're receiving _backupStatus instead of _storageStatus because the Node is confused about that _storage keyword, so it's better to change it only in that job.\",\"_promiseAddress\":\"The address of the promise contract\",\"_requestId\":\"The request ID\"}},\"requestStorageStatusUpdate(address,address,string,string,string)\":{\"details\":\"Only the PromiseFactory contract can call this function (it will after creating a new promise)\",\"params\":{\"_arweaveId\":\"The Arweave ID of the promise content\",\"_encryptedProof\":\"The encrypted string containing the user address, the IPFS hash and the Arweave ID\",\"_ipfsCid\":\"The IPFS CID of the promise content\",\"_promiseAddress\":\"The address of the promise contract\",\"_userAddress\":\"The address of the user who created the promise\"}},\"setOracleJobId(bytes32)\":{\"params\":{\"_oracleJobId\":\"The oracle job ID\"}},\"setPromiseFactoryContract(address)\":{\"params\":{\"_promiseFactoryContract\":\": The address of the PromiseFactory contract\"}}},\"title\":\"VerifyStorage\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"constructor\":{\"notice\":\"Initialize the link token and target oracle\"},\"fulfillStorageStatusUpdate(bytes32,address,uint8)\":{\"notice\":\"Callback function used by the oracleto return the promise storage status\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"requestStorageStatusUpdate(address,address,string,string,string)\":{\"notice\":\"Request a promise storage status to be updated\"},\"setOracleJobId(bytes32)\":{\"notice\":\"Set the oracle job ID\"},\"setPromiseFactoryContract(address)\":{\"notice\":\"Set the address of the PromiseFactory contract\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"notice\":\"Sends a request to the Chainlink oracle to verify the IPFS & Arweave hashes of a promise contract - If the promise has been created through the website, a string containing the user address, the IPFS hash and the Arweave ID will be encrypted along with a secret key and sent with the contract creation arguments. It will be decrypted by making a request to the Chainlink Node, with the help of an external adapter. The latter will decrypt the string and verify it does indeed contain the correct IPFS & Arweave hashes. -> It allows us to make sure the promise links to a permanent storage for the content, and that this content is the one the user uploaded to both platforms. - The users can still create promises without using the website, in which case the hashes will be sent as arguments to the contract constructor. In this case, the oracle will simply not be able to verify the hashes, therefore the website will not be able to display a 'verified' badge.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VerifyStorage.sol\":\"VerifyStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"contracts/IPromiseFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IPromiseFactory {\\n    function addTwitterVerifiedUser(\\n        address _userAddress,\\n        string memory _username\\n    ) external;\\n\\n    function updateStorageStatus(\\n        address _promiseContractAddress,\\n        uint8 _storageStatus\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3394747699a20b8e9cd8e3293ee5f691bc334b4b545aa35f9e70446976373b52\",\"license\":\"MIT\"},\"contracts/VerifyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\nimport \\\"./IPromiseFactory.sol\\\";\\nimport \\\"./utils/AddressToString.sol\\\";\\n\\n// storageStatus = 0 -> the provided IPFS and Arweave hashes have not yet been verified\\n// storageStatus = 1 -> the provided IPFS and eventually Arweave hashes could not be verified\\n// storageStatus = 2 -> only the IPFS hash has been provided and verified\\n// storageStatus = 3 -> both the IPFS & Arweave hashes has been provided and verified\\n\\n/**\\n * @author polarzero\\n * @title VerifyStorage\\n * @notice Sends a request to the Chainlink oracle to verify the IPFS & Arweave hashes\\n * of a promise contract\\n * - If the promise has been created through the website, a string containing the user address,\\n * the IPFS hash and the Arweave ID will be encrypted along with a secret key and sent with the\\n * contract creation arguments. It will be decrypted by making a request to the Chainlink Node,\\n * with the help of an external adapter. The latter will decrypt the string and verify it does\\n * indeed contain the correct IPFS & Arweave hashes.\\n * -> It allows us to make sure the promise links to a permanent storage for the content, and\\n * that this content is the one the user uploaded to both platforms.\\n * - The users can still create promises without using the website, in which case the hashes\\n * will be sent as arguments to the contract constructor. In this case, the oracle will simply\\n * not be able to verify the hashes, therefore the website will not be able to display a 'verified'\\n * badge.\\n */\\n\\ncontract VerifyStorage is ChainlinkClient, ConfirmedOwner {\\n    using Chainlink for Chainlink.Request;\\n\\n    error VerifyStorage__NOT_FACTORY();\\n\\n    // Chainlink variables\\n    uint256 private constant ORACLE_PAYMENT = (1 * LINK_DIVISIBILITY) / 10; // 0.1 LINK\\n    bytes32 private s_oracleJobId = \\\"cd430ded65b64b5fae032f9b9b37b89d\\\";\\n\\n    // Declare the PromiseFactory contract address and the interface\\n    address private s_promiseFactoryContract;\\n    IPromiseFactory private s_promiseFactoryInterface;\\n\\n    // Events\\n    event StorageStatusUpdateRequested(\\n        bytes32 indexed requestId,\\n        address indexed promiseAddress\\n    );\\n    event StorageStatusUpdateSuccessful(\\n        bytes32 indexed requestId,\\n        address indexed promiseAddress,\\n        uint8 storageStatus\\n    );\\n\\n    /**\\n     * @notice Initialize the link token and target oracle\\n     * @param _linkTokenContract (Mumbai): 0x326C977E6efc84E512bB9C30f76E30c160eD06FB\\n     * @param _oracleContract (Mumbai): 0x2BB8Dd9C16edeF313eb9ccBd5F42A8b577cB1E3c\\n     * @param _promiseFactoryContract: The address of the PromiseFactory contract\\n     */\\n\\n    constructor(\\n        address _linkTokenContract,\\n        address _oracleContract,\\n        address _promiseFactoryContract\\n    ) ConfirmedOwner(msg.sender) {\\n        setChainlinkToken(_linkTokenContract);\\n        setChainlinkOracle(_oracleContract);\\n        setPromiseFactoryContract(_promiseFactoryContract);\\n    }\\n\\n    // Modifier to check if the caller is the PromiseFactory contract\\n    modifier onlyPromiseFactory() {\\n        if (msg.sender != s_promiseFactoryContract)\\n            revert VerifyStorage__NOT_FACTORY();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Request a promise storage status to be updated\\n     * @param _promiseAddress The address of the promise contract\\n     * @param _userAddress The address of the user who created the promise\\n     * @param _ipfsCid The IPFS CID of the promise content\\n     * @param _arweaveId The Arweave ID of the promise content\\n     * @param _encryptedProof The encrypted string containing the user address, the IPFS hash\\n     * and the Arweave ID\\n     * @dev Only the PromiseFactory contract can call this function (it will after\\n     * creating a new promise)\\n     */\\n\\n    function requestStorageStatusUpdate(\\n        address _promiseAddress,\\n        address _userAddress,\\n        string memory _ipfsCid,\\n        string memory _arweaveId,\\n        string memory _encryptedProof\\n    ) external onlyPromiseFactory returns (bytes32 requestId) {\\n        Chainlink.Request memory req = buildChainlinkRequest(\\n            s_oracleJobId,\\n            address(this),\\n            this.fulfillStorageStatusUpdate.selector\\n        );\\n\\n        string memory promiseAddress = addressToString(_promiseAddress);\\n        string memory userAddress = addressToString(_userAddress);\\n\\n        req.add(\\\"promiseAddress\\\", promiseAddress);\\n        req.add(\\\"userAddress\\\", userAddress);\\n        req.add(\\\"ipfsCid\\\", _ipfsCid);\\n        req.add(\\\"arweaveId\\\", _arweaveId);\\n        req.add(\\\"encryptedProof\\\", _encryptedProof);\\n\\n        requestId = sendOperatorRequest(req, ORACLE_PAYMENT);\\n        emit StorageStatusUpdateRequested(requestId, _promiseAddress);\\n    }\\n\\n    /**\\n     * @notice Callback function used by the oracleto return the promise storage status\\n     * @param _requestId The request ID\\n     * @param _promiseAddress The address of the promise contract\\n     * @param _backupStatus The storage status of the promise\\n     * -> We're receiving _backupStatus instead of _storageStatus because the Node is\\n     * confused about that _storage keyword, so it's better to change it only in that job.\\n     * @dev Only the Chainlink oracle can call this function\\n     */\\n\\n    function fulfillStorageStatusUpdate(\\n        bytes32 _requestId,\\n        address _promiseAddress,\\n        uint8 _backupStatus\\n    ) external recordChainlinkFulfillment(_requestId) {\\n        s_promiseFactoryInterface.updateStorageStatus(\\n            _promiseAddress,\\n            _backupStatus\\n        );\\n\\n        emit StorageStatusUpdateSuccessful(\\n            _requestId,\\n            _promiseAddress,\\n            _backupStatus\\n        );\\n    }\\n\\n    /**\\n     * @notice Set the address of the PromiseFactory contract\\n     * @param _promiseFactoryContract: The address of the PromiseFactory contract\\n     */\\n\\n    function setPromiseFactoryContract(address _promiseFactoryContract)\\n        public\\n        onlyOwner\\n    {\\n        s_promiseFactoryContract = _promiseFactoryContract;\\n        s_promiseFactoryInterface = IPromiseFactory(_promiseFactoryContract);\\n    }\\n\\n    /**\\n     * @notice Set the oracle job ID\\n     * @param _oracleJobId The oracle job ID\\n     */\\n\\n    function setOracleJobId(bytes32 _oracleJobId) public onlyOwner {\\n        s_oracleJobId = _oracleJobId;\\n    }\\n\\n    // Getters\\n\\n    function getPromiseFactoryContract() public view returns (address) {\\n        return s_promiseFactoryContract;\\n    }\\n\\n    function getOracleJobId() public view returns (bytes32) {\\n        return s_oracleJobId;\\n    }\\n\\n    function getOraclePayment() public pure returns (uint256) {\\n        return ORACLE_PAYMENT;\\n    }\\n\\n    function getLinkBalance() public view returns (uint256) {\\n        LinkTokenInterface linkToken = LinkTokenInterface(\\n            chainlinkTokenAddress()\\n        );\\n        return linkToken.balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x36a5acceeef22e5dd14af0f7c4aac842c6ea25f1e03f5fcbf9fc01817378a1d7\",\"license\":\"MIT\"},\"contracts/utils/AddressToString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @notice Convert address to string\\n * @param _addr The address to convert\\n */\\n\\nfunction addressToString(address _addr) pure returns (string memory) {\\n    bytes32 value = bytes32(uint256(uint160(_addr)));\\n    bytes memory alphabet = \\\"0123456789abcdef\\\";\\n    bytes memory str = new bytes(42);\\n    str[0] = \\\"0\\\";\\n    str[1] = \\\"x\\\";\\n\\n    for (uint256 i = 0; i < 20; i++) {\\n        str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n        str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n    }\\n\\n    return string(str);\\n}\\n\",\"keccak256\":\"0xd28eb9e4f4ea6feab18b90435caf586f2c2ff4834071e2f421bb3cf19b03ad3e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b1461012e57806398b6407d1461014c578063c28ecb071461017c578063c78613da14610198578063df9776cf146101b6578063f2fde38b146101d2576100a9565b8063435a7b90146100ae57806350c5f975146100ca5780636986f2e9146100e857806372c0c0a81461010657806379ba509714610124575b600080fd5b6100c860048036038101906100c39190611800565b6101ee565b005b6100d261027b565b6040516100df9190611846565b60405180910390f35b6100f0610308565b6040516100fd9190611846565b60405180910390f35b61010e610330565b60405161011b9190611870565b60405180910390f35b61012c61035a565b005b6101366104f1565b6040516101439190611870565b60405180910390f35b610166600480360381019061016191906119d1565b61051b565b6040516101739190611ab9565b60405180910390f35b61019660048036038101906101919190611b39565b6107c4565b005b6101a06109ad565b6040516101ad9190611ab9565b60405180910390f35b6101d060048036038101906101cb9190611b8c565b6109b7565b005b6101ec60048036038101906101e79190611800565b6109c9565b005b6101f66109dd565b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080610286610a6f565b90508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102c19190611870565b602060405180830381865afa1580156102de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103029190611be5565b91505090565b6000600a670de0b6b3a764000060016103219190611c41565b61032b9190611cca565b905090565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e190611d58565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105a4576040517ff0f0d8f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006105ba6008543063c28ecb0760e01b610a99565b905060006105c788610aca565b905060006105d488610aca565b90506106206040518060400160405280600e81526020017f70726f6d697365416464726573730000000000000000000000000000000000008152508385610dd59092919063ffffffff16565b61066a6040518060400160405280600b81526020017f75736572416464726573730000000000000000000000000000000000000000008152508285610dd59092919063ffffffff16565b6106b46040518060400160405280600781526020017f69706673436964000000000000000000000000000000000000000000000000008152508885610dd59092919063ffffffff16565b6106fe6040518060400160405280600981526020017f61727765617665496400000000000000000000000000000000000000000000008152508785610dd59092919063ffffffff16565b6107486040518060400160405280600e81526020017f656e6372797074656450726f6f660000000000000000000000000000000000008152508685610dd59092919063ffffffff16565b61077283600a670de0b6b3a764000060016107639190611c41565b61076d9190611cca565b610e08565b93508873ffffffffffffffffffffffffffffffffffffffff16847fea1fe969eb9425d4b455fdd44b55e1784f09ae22806df6a2bce7fce1a7d83b3660405160405180910390a350505095945050505050565b826005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085d90611dea565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a2600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a2d0095e84846040518363ffffffff1660e01b8152600401610926929190611e19565b600060405180830381600087803b15801561094057600080fd5b505af1158015610954573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16847f2b32f7b40fa9ebe1b1fb2ba5ade1624f47a6de66a11c02aa14cb85be8bfe84ea8460405161099f9190611e42565b60405180910390a350505050565b6000600854905090565b6109bf6109dd565b8060088190555050565b6109d16109dd565b6109da81610e3f565b50565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6490611ea9565b60405180910390fd5b565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610aa1611707565b610aa9611707565b610ac085858584610f6d909392919063ffffffff16565b9150509392505050565b606060008273ffffffffffffffffffffffffffffffffffffffff1660001b905060006040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506000602a67ffffffffffffffff811115610b4157610b406118a6565b5b6040519080825280601f01601f191660200182016040528015610b735781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610bab57610baa611ec9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610c0f57610c0e611ec9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b6014811015610dc95782600485600c84610c5b9190611ef8565b60208110610c6c57610c6b611ec9565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110610cab57610caa611ec9565b5b602001015160f81c60f81b82600283610cc49190611c41565b6002610cd09190611ef8565b81518110610ce157610ce0611ec9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b85600c84610d249190611ef8565b60208110610d3557610d34611ec9565b5b1a60f81b1660f81c60ff1681518110610d5157610d50611ec9565b5b602001015160f81c60f81b82600283610d6a9190611c41565b6003610d769190611ef8565b81518110610d8757610d86611ec9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610dc190611f2c565b915050610c41565b50809350505050919050565b610dec82846080015161101d90919063ffffffff16565b610e0381846080015161101d90919063ffffffff16565b505050565b6000610e37600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484611042565b905092915050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ead576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea490611fc0565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b610f75611707565b610f85856080015161010061110c565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b61102a8260038351611176565b61103d81836112fb90919063ffffffff16565b505050565b60008060045490506001816110579190611ef8565b6004819055506000633c6d41b960e01b600080876000015188604001518660028b6080015160000151604051602401611096979695949392919061209a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506111018683868461131d565b925050509392505050565b611114611774565b60006020836111239190612110565b1461114f576020826111359190612110565b60206111419190612141565b8261114c9190611ef8565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff16116111ad576111a78160058460ff16901b60ff1617846114b290919063ffffffff16565b506112f6565b60ff8167ffffffffffffffff1611611203576111dc601860058460ff16901b17846114b290919063ffffffff16565b506111fd8167ffffffffffffffff166001856114d29092919063ffffffff16565b506112f5565b61ffff8167ffffffffffffffff161161125a57611233601960058460ff16901b17846114b290919063ffffffff16565b506112548167ffffffffffffffff166002856114d29092919063ffffffff16565b506112f4565b63ffffffff8167ffffffffffffffff16116112b35761128c601a60058460ff16901b17846114b290919063ffffffff16565b506112ad8167ffffffffffffffff166004856114d29092919063ffffffff16565b506112f3565b6112d0601b60058460ff16901b17846114b290919063ffffffff16565b506112f18167ffffffffffffffff166008856114d29092919063ffffffff16565b505b5b5b5b505050565b611303611774565b611315838460000151518485516114f4565b905092915050565b6000308460405160200161133292919061222e565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b81526004016114289392919061225a565b6020604051808303816000875af1158015611447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146b91906122d0565b6114aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a19061236f565b60405180910390fd5b949350505050565b6114ba611774565b6114ca83846000015151846115e3565b905092915050565b6114da611774565b6114eb848560000151518585611639565b90509392505050565b6114fc611774565b825182111561150a57600080fd5b8460200151828561151b9190611ef8565b11156115505761154f8560026115408860200151888761153b9190611ef8565b6116c7565b61154a9190611c41565b6116e3565b5b60008086518051876020830101935080888701111561156f5787860182525b60208701925050505b602084106115b657805182526020826115919190611ef8565b91506020816115a09190611ef8565b90506020846115af9190612141565b9350611578565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b6115eb611774565b8360200151831061161157611610846002866020015161160b9190611c41565b6116e3565b5b8351805160208583010184815381860361162c576001820183525b5050508390509392505050565b611641611774565b846020015184836116529190611ef8565b111561167a57611679856002868561166a9190611ef8565b6116749190611c41565b6116e3565b5b600060018361010061168c91906124c2565b6116969190612141565b905085518386820101858319825116178152815185880111156116b95784870182525b505085915050949350505050565b6000818311156116d9578290506116dd565b8190505b92915050565b6000826000015190506116f6838361110c565b5061170183826112fb565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016000815260200161176e611774565b81525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117cd826117a2565b9050919050565b6117dd816117c2565b81146117e857600080fd5b50565b6000813590506117fa816117d4565b92915050565b60006020828403121561181657611815611798565b5b6000611824848285016117eb565b91505092915050565b6000819050919050565b6118408161182d565b82525050565b600060208201905061185b6000830184611837565b92915050565b61186a816117c2565b82525050565b60006020820190506118856000830184611861565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118de82611895565b810181811067ffffffffffffffff821117156118fd576118fc6118a6565b5b80604052505050565b600061191061178e565b905061191c82826118d5565b919050565b600067ffffffffffffffff82111561193c5761193b6118a6565b5b61194582611895565b9050602081019050919050565b82818337600083830152505050565b600061197461196f84611921565b611906565b9050828152602081018484840111156119905761198f611890565b5b61199b848285611952565b509392505050565b600082601f8301126119b8576119b761188b565b5b81356119c8848260208601611961565b91505092915050565b600080600080600060a086880312156119ed576119ec611798565b5b60006119fb888289016117eb565b9550506020611a0c888289016117eb565b945050604086013567ffffffffffffffff811115611a2d57611a2c61179d565b5b611a39888289016119a3565b935050606086013567ffffffffffffffff811115611a5a57611a5961179d565b5b611a66888289016119a3565b925050608086013567ffffffffffffffff811115611a8757611a8661179d565b5b611a93888289016119a3565b9150509295509295909350565b6000819050919050565b611ab381611aa0565b82525050565b6000602082019050611ace6000830184611aaa565b92915050565b611add81611aa0565b8114611ae857600080fd5b50565b600081359050611afa81611ad4565b92915050565b600060ff82169050919050565b611b1681611b00565b8114611b2157600080fd5b50565b600081359050611b3381611b0d565b92915050565b600080600060608486031215611b5257611b51611798565b5b6000611b6086828701611aeb565b9350506020611b71868287016117eb565b9250506040611b8286828701611b24565b9150509250925092565b600060208284031215611ba257611ba1611798565b5b6000611bb084828501611aeb565b91505092915050565b611bc28161182d565b8114611bcd57600080fd5b50565b600081519050611bdf81611bb9565b92915050565b600060208284031215611bfb57611bfa611798565b5b6000611c0984828501611bd0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c4c8261182d565b9150611c578361182d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611c9057611c8f611c12565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611cd58261182d565b9150611ce08361182d565b925082611cf057611cef611c9b565b5b828204905092915050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000611d42601683611cfb565b9150611d4d82611d0c565b602082019050919050565b60006020820190508181036000830152611d7181611d35565b9050919050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b6000611dd4602883611cfb565b9150611ddf82611d78565b604082019050919050565b60006020820190508181036000830152611e0381611dc7565b9050919050565b611e1381611b00565b82525050565b6000604082019050611e2e6000830185611861565b611e3b6020830184611e0a565b9392505050565b6000602082019050611e576000830184611e0a565b92915050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000611e93601683611cfb565b9150611e9e82611e5d565b602082019050919050565b60006020820190508181036000830152611ec281611e86565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611f038261182d565b9150611f0e8361182d565b9250828201905080821115611f2657611f25611c12565b5b92915050565b6000611f378261182d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611f6957611f68611c12565b5b600182019050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000611faa601783611cfb565b9150611fb582611f74565b602082019050919050565b60006020820190508181036000830152611fd981611f9d565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61201581611fe0565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561205557808201518184015260208101905061203a565b60008484015250505050565b600061206c8261201b565b6120768185612026565b9350612086818560208601612037565b61208f81611895565b840191505092915050565b600060e0820190506120af600083018a611861565b6120bc6020830189611837565b6120c96040830188611aaa565b6120d6606083018761200c565b6120e36080830186611837565b6120f060a0830185611837565b81810360c08301526121028184612061565b905098975050505050505050565b600061211b8261182d565b91506121268361182d565b92508261213657612135611c9b565b5b828206905092915050565b600061214c8261182d565b91506121578361182d565b925082820390508181111561216f5761216e611c12565b5b92915050565b6000819050919050565b600061219a612195612190846117a2565b612175565b6117a2565b9050919050565b60006121ac8261217f565b9050919050565b60006121be826121a1565b9050919050565b60008160601b9050919050565b60006121dd826121c5565b9050919050565b60006121ef826121d2565b9050919050565b612207612202826121b3565b6121e4565b82525050565b6000819050919050565b6122286122238261182d565b61220d565b82525050565b600061223a82856121f6565b60148201915061224a8284612217565b6020820191508190509392505050565b600060608201905061226f6000830186611861565b61227c6020830185611837565b818103604083015261228e8184612061565b9050949350505050565b60008115159050919050565b6122ad81612298565b81146122b857600080fd5b50565b6000815190506122ca816122a4565b92915050565b6000602082840312156122e6576122e5611798565b5b60006122f4848285016122bb565b91505092915050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b6000612359602383611cfb565b9150612364826122fd565b604082019050919050565b600060208201905081810360008301526123888161234c565b9050919050565b60008160011c9050919050565b6000808291508390505b60018511156123e6578086048111156123c2576123c1611c12565b5b60018516156123d15780820291505b80810290506123df8561238f565b94506123a6565b94509492505050565b6000826123ff57600190506124bb565b8161240d57600090506124bb565b8160018114612423576002811461242d5761245c565b60019150506124bb565b60ff84111561243f5761243e611c12565b5b8360020a91508482111561245657612455611c12565b5b506124bb565b5060208310610133831016604e8410600b84101617156124915782820a90508381111561248c5761248b611c12565b5b6124bb565b61249e848484600161239c565b925090508184048111156124b5576124b4611c12565b5b81810290505b9392505050565b60006124cd8261182d565b91506124d88361182d565b92506125057fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846123ef565b90509291505056fea2646970667358221220b22c4f4e96c9c3765e88e7816ed3ecb68e5017ea907b56dc7f123b5af8668b8a64736f6c63430008100033",
  "devdoc": {
    "author": "polarzero",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_linkTokenContract": "(Mumbai): 0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
          "_oracleContract": "(Mumbai): 0x2BB8Dd9C16edeF313eb9ccBd5F42A8b577cB1E3c",
          "_promiseFactoryContract": ": The address of the PromiseFactory contract"
        }
      },
      "fulfillStorageStatusUpdate(bytes32,address,uint8)": {
        "details": "Only the Chainlink oracle can call this function",
        "params": {
          "_backupStatus": "The storage status of the promise -> We're receiving _backupStatus instead of _storageStatus because the Node is confused about that _storage keyword, so it's better to change it only in that job.",
          "_promiseAddress": "The address of the promise contract",
          "_requestId": "The request ID"
        }
      },
      "requestStorageStatusUpdate(address,address,string,string,string)": {
        "details": "Only the PromiseFactory contract can call this function (it will after creating a new promise)",
        "params": {
          "_arweaveId": "The Arweave ID of the promise content",
          "_encryptedProof": "The encrypted string containing the user address, the IPFS hash and the Arweave ID",
          "_ipfsCid": "The IPFS CID of the promise content",
          "_promiseAddress": "The address of the promise contract",
          "_userAddress": "The address of the user who created the promise"
        }
      },
      "setOracleJobId(bytes32)": {
        "params": {
          "_oracleJobId": "The oracle job ID"
        }
      },
      "setPromiseFactoryContract(address)": {
        "params": {
          "_promiseFactoryContract": ": The address of the PromiseFactory contract"
        }
      }
    },
    "title": "VerifyStorage",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "constructor": {
        "notice": "Initialize the link token and target oracle"
      },
      "fulfillStorageStatusUpdate(bytes32,address,uint8)": {
        "notice": "Callback function used by the oracleto return the promise storage status"
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "requestStorageStatusUpdate(address,address,string,string,string)": {
        "notice": "Request a promise storage status to be updated"
      },
      "setOracleJobId(bytes32)": {
        "notice": "Set the oracle job ID"
      },
      "setPromiseFactoryContract(address)": {
        "notice": "Set the address of the PromiseFactory contract"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      }
    },
    "notice": "Sends a request to the Chainlink oracle to verify the IPFS & Arweave hashes of a promise contract - If the promise has been created through the website, a string containing the user address, the IPFS hash and the Arweave ID will be encrypted along with a secret key and sent with the contract creation arguments. It will be decrypted by making a request to the Chainlink Node, with the help of an external adapter. The latter will decrypt the string and verify it does indeed contain the correct IPFS & Arweave hashes. -> It allows us to make sure the promise links to a permanent storage for the content, and that this content is the one the user uploaded to both platforms. - The users can still create promises without using the website, in which case the hashes will be sent as arguments to the contract constructor. In this case, the oracle will simply not be able to verify the hashes, therefore the website will not be able to display a 'verified' badge.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/VerifyStorage.sol:VerifyStorage",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)1156"
      },
      {
        "astId": 321,
        "contract": "contracts/VerifyStorage.sol:VerifyStorage",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/VerifyStorage.sol:VerifyStorage",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1251"
      },
      {
        "astId": 327,
        "contract": "contracts/VerifyStorage.sol:VerifyStorage",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1331"
      },
      {
        "astId": 330,
        "contract": "contracts/VerifyStorage.sol:VerifyStorage",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/VerifyStorage.sol:VerifyStorage",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 889,
        "contract": "contracts/VerifyStorage.sol:VerifyStorage",
        "label": "s_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 891,
        "contract": "contracts/VerifyStorage.sol:VerifyStorage",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3939,
        "contract": "contracts/VerifyStorage.sol:VerifyStorage",
        "label": "s_oracleJobId",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 3941,
        "contract": "contracts/VerifyStorage.sol:VerifyStorage",
        "label": "s_promiseFactoryContract",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 3944,
        "contract": "contracts/VerifyStorage.sol:VerifyStorage",
        "label": "s_promiseFactoryInterface",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IPromiseFactory)2686"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)1156": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IPromiseFactory)2686": {
        "encoding": "inplace",
        "label": "contract IPromiseFactory",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1251": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1331": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}