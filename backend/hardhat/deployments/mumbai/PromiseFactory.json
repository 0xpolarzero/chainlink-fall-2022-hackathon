{
  "address": "0x689294871A8F6D29664480d1BAbc1a473545534D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PromiseFactory__EMPTY_FIELD",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PromiseFactory__INCORRECT_FIELD_LENGTH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PromiseFactory__NOT_OWNER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PromiseFactory__NOT_VERIFIER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PromiseFactory__addParticipant__ALREADY_PARTICIPANT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PromiseFactory__addParticipant__NOT_PARTICIPANT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PromiseFactory__createPromiseContract__DUPLICATE_FIELD",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_participantName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_participantTwitterHandle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_participantAddress",
          "type": "address"
        }
      ],
      "name": "ParticipantAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_promiseName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_ipfsCid",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_arweaveId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "encryptedProof",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "_partyNames",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "_partyTwitterHandles",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_partyAddresses",
          "type": "address[]"
        }
      ],
      "name": "PromiseContractCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "promiseContract",
          "type": "address"
        }
      ],
      "name": "StorageStatusUpdateRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_storageStatus",
          "type": "uint8"
        }
      ],
      "name": "StorageStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_twitterHandle",
          "type": "string"
        }
      ],
      "name": "TwitterAddVerifiedSuccessful",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_promiseContractAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_partyName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_partyTwitterHandle",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_partyAddress",
          "type": "address"
        }
      ],
      "name": "addParticipant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_twitterHandle",
          "type": "string"
        }
      ],
      "name": "addTwitterVerifiedUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_promiseName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ipfsCid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_arweaveId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_encryptedProof",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_partyNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_partyTwitterHandles",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_partyAddresses",
          "type": "address[]"
        }
      ],
      "name": "createPromiseContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "promiseContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getPromiseContractAddresses",
      "outputs": [
        {
          "internalType": "contract PromiseContract[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getPromiseContractCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStorageVerifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getTwitterVerifiedHandle",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTwitterVerifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_storageVerifier",
          "type": "address"
        }
      ],
      "name": "setStorageVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_twitterVerifier",
          "type": "address"
        }
      ],
      "name": "setTwitterVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_promiseContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_storageStatus",
          "type": "uint8"
        }
      ],
      "name": "updateStorageStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1d27c39b2b099f321b2d0c72ae454ff3691676f6687f3470673f37a5daa5eaf",
  "receipt": {
    "to": null,
    "from": "0xc06d127E504a944f63Bc750D8F512556c576F3EF",
    "contractAddress": "0x689294871A8F6D29664480d1BAbc1a473545534D",
    "transactionIndex": 17,
    "gasUsed": "4796991",
    "logsBloom": "0x0000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000800000a000000000000000000000000000000000000000000000000000800000000000000000040100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000040000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000040000000000000000000000000000000000100000",
    "blockHash": "0x615d3599ff34d83302b73d9302d5f355ea112bc388391b395fe7676b368a445d",
    "transactionHash": "0xe1d27c39b2b099f321b2d0c72ae454ff3691676f6687f3470673f37a5daa5eaf",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 29204323,
        "transactionHash": "0xe1d27c39b2b099f321b2d0c72ae454ff3691676f6687f3470673f37a5daa5eaf",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c06d127e504a944f63bc750d8f512556c576f3ef",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000199041c0d1910000000000000000000000000000000000000000000000000013d82e3d47388ae7000000000000000000000000000000000000000000000af03bf0c59ed55cd5b300000000000000000000000000000000000000000000000013be9dfb8666f9e7000000000000000000000000000000000000000000000af03c0a55e0962e66b3",
        "logIndex": 55,
        "blockHash": "0x615d3599ff34d83302b73d9302d5f355ea112bc388391b395fe7676b368a445d"
      }
    ],
    "blockNumber": 29204323,
    "cumulativeGasUsed": "7971343",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 12,
  "solcInputHash": "64f75fecd329e22821d787b99572717b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PromiseFactory__EMPTY_FIELD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PromiseFactory__INCORRECT_FIELD_LENGTH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PromiseFactory__NOT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PromiseFactory__NOT_VERIFIER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PromiseFactory__addParticipant__ALREADY_PARTICIPANT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PromiseFactory__addParticipant__NOT_PARTICIPANT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PromiseFactory__createPromiseContract__DUPLICATE_FIELD\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_participantName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_participantTwitterHandle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_participantAddress\",\"type\":\"address\"}],\"name\":\"ParticipantAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_promiseName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_ipfsCid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_arweaveId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"encryptedProof\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_partyNames\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_partyTwitterHandles\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_partyAddresses\",\"type\":\"address[]\"}],\"name\":\"PromiseContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"promiseContract\",\"type\":\"address\"}],\"name\":\"StorageStatusUpdateRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_storageStatus\",\"type\":\"uint8\"}],\"name\":\"StorageStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_twitterHandle\",\"type\":\"string\"}],\"name\":\"TwitterAddVerifiedSuccessful\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_promiseContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_partyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_partyTwitterHandle\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_partyAddress\",\"type\":\"address\"}],\"name\":\"addParticipant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_twitterHandle\",\"type\":\"string\"}],\"name\":\"addTwitterVerifiedUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_promiseName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ipfsCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_arweaveId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_encryptedProof\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_partyNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_partyTwitterHandles\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_partyAddresses\",\"type\":\"address[]\"}],\"name\":\"createPromiseContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"promiseContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getPromiseContractAddresses\",\"outputs\":[{\"internalType\":\"contract PromiseContract[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getPromiseContractCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStorageVerifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getTwitterVerifiedHandle\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTwitterVerifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageVerifier\",\"type\":\"address\"}],\"name\":\"setStorageVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_twitterVerifier\",\"type\":\"address\"}],\"name\":\"setTwitterVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_promiseContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_storageStatus\",\"type\":\"uint8\"}],\"name\":\"updateStorageStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"polarzero\",\"details\":\"This contract is the only one that can create new promises For a successful flow, the following steps are recommended: 1. Deploy the PromiseFactory contract 2. Deploy the verifiers (VerifyStorage, VerifyTwitter) 3. Set the verifiers in the PromiseFactory contract 4. Fund the verifiers with LINK 5. Deploy a new promise contract * Only via the App can the promises be successfully verified by the VerifyStorage contract * If you want to reproduce this verification, you will need your own External Adapter, * and an interface that both encrypt/decrypt the IPFS & Arweave hashes with the same * encryption key. More details in the documentation.\",\"kind\":\"dev\",\"methods\":{\"addParticipant(address,string,string,address)\":{\"details\":\"Only a participant of the contract can call this functionIt can only be called if the contract is not locked (the child contract takes care of that)\",\"params\":{\"_partyAddress\":\"The address of the party\",\"_partyName\":\"The name of the party\",\"_partyTwitterHandle\":\"The Twitter handle of the party\",\"_promiseContractAddress\":\"The address of the promise contract\"}},\"addTwitterVerifiedUser(address,string)\":{\"details\":\"Only the verifier contract can call this function, after the account has been verified with the Chainlink Node + External Adapter\",\"params\":{\"_twitterHandle\":\"The Twitter handle of the verified account\",\"_userAddress\":\"The address of the user\"}},\"createPromiseContract(string,string,string,string,string[],string[],address[])\":{\"params\":{\"_arweaveId\":\"The ID of the zip stored on Arweave\",\"_encryptedProof\":\"The encrypted string of the promise name, user address, IPFS and Arweave hashes\",\"_ipfsCid\":\"The CID of the directory stored on IPFS\",\"_partyAddresses\":\"The addresses specified by the user that will be allowed to interact with the contract\",\"_partyNames\":\"The names of the parties specified by the user\",\"_partyTwitterHandles\":\"The Twitter handles of the parties specified by the user\",\"_promiseName\":\"The name of the contract specified by the user\"}},\"updateStorageStatus(address,uint8)\":{\"details\":\"Only the verifier contract can call this function, after the storage has been verified with the Chainlink Node + External AdapterThis step could as well be avoided for better optimization, since VerifyStorage could directly call the PromiseContract to update its status BUT we want to do it this way, because: - it helps us keep this PromiseFactory contract as a mediator, which allows for better event tracking & easier security measures - it is not a major flaw in terms of gas usage, as long as we're deploying on a L2 solution\",\"params\":{\"_promiseContractAddress\":\"The address of the promise contract\",\"_storageStatus\":\"The new storage status -> 1 = failed, 2 = IPFS provided & verified, 3 = IPFS + Arweave provided & verified\"}}},\"title\":\"PromiseFactory\",\"version\":1},\"userdoc\":{\"errors\":{\"PromiseFactory__EMPTY_FIELD()\":[{\"notice\":\"Errors\"}]},\"events\":{\"PromiseContractCreated(address,address,string,string,string,string,string[],string[],address[])\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"addParticipant(address,string,string,address)\":{\"notice\":\"Add a participant to a promise contract\"},\"addTwitterVerifiedUser(address,string)\":{\"notice\":\"Add a verified Twitter account to the list of verified accounts\"},\"constructor\":{\"notice\":\"Initialize the contract\"},\"createPromiseContract(string,string,string,string,string[],string[],address[])\":{\"notice\":\"Create a new contract and add it to the list of child contracts\"},\"getPromiseContractAddresses(address)\":{\"notice\":\"Getters\"},\"setTwitterVerifier(address)\":{\"notice\":\"Setters\"},\"updateStorageStatus(address,uint8)\":{\"notice\":\"Update the storage status of a promise contract\"}},\"notice\":\"This is the factory contract initializing & referencing all promises\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PromiseFactory.sol\":\"PromiseFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"contracts/IVerifyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IVerifyStorage {\\n    function requestStorageStatusUpdate(\\n        address _promiseContractAddress,\\n        address _userAddress,\\n        string memory _ipfsHash,\\n        string memory _arweaveId,\\n        string memory _encryptedProof\\n    ) external;\\n}\\n\",\"keccak256\":\"0x862b778807ea0d335055d9f3b3bbd1246d9aae160ded0d2ae9ce3cf50175faee\",\"license\":\"MIT\"},\"contracts/PromiseContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @author polarzero\\n * @title Promise Contract\\n * @notice This is the child contract generated by the Promise Factory\\n * once a user creates a new promise\\n */\\n\\ncontract PromiseContract {\\n    /// Errors\\n    error PromiseContract__NOT_FACTORY();\\n    error PromiseContract__NOT_PARTICIPANT();\\n    error PromiseContract__PROMISE_LOCKED();\\n    error PromiseContract__createParticipant__INCORRECT_FIELD_LENGTH();\\n    error PromiseContract__approvePromise__ALREADY_APPROVED();\\n    error PromiseContract__lockPromise__PARTICIPANT_NOT_APPROVED();\\n    error PromiseContract__updateStorageStatus__INVALID_STATUS();\\n\\n    /// Types\\n    struct Participant {\\n        string participantName;\\n        string participantTwitterHandle;\\n        address participantAddress;\\n    }\\n\\n    /// Variables\\n    uint256 private s_participantCount = 0;\\n    // If the promise is created through the website, the content uploaded to IPFS\\n    // and eventually Arweave can be verified with the encryptedProof\\n    // which will result in a storageStatus that provides information on the persistence of the data\\n    // storageStatus = 0 -> the provided IPFS and Arweave hashes have not yet been verified\\n    // storageStatus = 1 -> the provided IPFS and eventually Arweave hashes could not be verified\\n    // storageStatus = 2 -> only the IPFS hash has been provided and verified\\n    // storageStatus = 3 -> both the IPFS & Arweave hashes has been provided and verified\\n    uint8 private s_storageStatus = 0;\\n    // The 3 following variables need to be stored in a string because of their length\\n    // So they cannot be set to immutable\\n    string private s_promiseName;\\n    string private s_ipfsCid;\\n    string private s_arweaveId;\\n    string private s_encryptedProof;\\n    address private immutable i_owner;\\n    address private immutable i_promiseFactoryContract;\\n    address[] private s_participantAddresses;\\n    bool private s_promiseLocked = false;\\n\\n    // Mapping of addresses to name & twitter handle\\n    mapping(address => Participant) private s_parties;\\n    // Mapping of addresses to whether or not they have approved the agreement\\n    mapping(address => bool) private s_approvedParties;\\n\\n    /// Events\\n    event ParticipantCreated(\\n        string participantName,\\n        string participantTwitterHandle,\\n        address indexed participantAddress\\n    );\\n\\n    event ParticipantApproved(\\n        string participantName,\\n        string participantTwitterHandle,\\n        address indexed participantAddress\\n    );\\n\\n    event PromiseLocked();\\n\\n    event PromiseStorageStatusUpdated(uint8 storageStatus);\\n\\n    /// Modifiers\\n    modifier onlyParticipant() {\\n        bool isParticipant = getIsParticipant(msg.sender);\\n\\n        if (!isParticipant) revert PromiseContract__NOT_PARTICIPANT();\\n        _;\\n    }\\n\\n    modifier onlyUnlocked() {\\n        if (s_promiseLocked) revert PromiseContract__PROMISE_LOCKED();\\n        _;\\n    }\\n\\n    modifier onlyPromiseFactory() {\\n        if (msg.sender != i_promiseFactoryContract)\\n            revert PromiseContract__NOT_FACTORY();\\n        _;\\n    }\\n\\n    /// Functions\\n    /**\\n     * @dev Initialize the contract from the Master Contract with the user address as the owner\\n     * @param _owner The address of the creator of the promise\\n     * @param _promiseName The name of the promise\\n     * @param _ipfsCid The IPFS CID of the content\\n     * @param _arweaveId The Arweave ID of the content\\n     * @param _encryptedProof The encrypted proof of the promise (see ./VerifyStorage.sol)\\n     * @param _partyNames The names of the parties\\n     * @param _partyTwitterHandles The twitter handles of the parties (optional, if not provided = '')\\n     * @param _partyAddresses The addresses of the parties\\n     */\\n\\n    constructor(\\n        address _owner,\\n        string memory _promiseName,\\n        string memory _ipfsCid,\\n        string memory _arweaveId,\\n        string memory _encryptedProof,\\n        string[] memory _partyNames,\\n        string[] memory _partyTwitterHandles,\\n        address[] memory _partyAddresses\\n    ) {\\n        i_promiseFactoryContract = msg.sender;\\n        i_owner = _owner;\\n        s_promiseName = _promiseName;\\n        s_ipfsCid = _ipfsCid;\\n        s_arweaveId = _arweaveId;\\n        s_encryptedProof = _encryptedProof;\\n\\n        for (uint256 i = 0; i < _partyAddresses.length; i++) {\\n            createParticipant(\\n                _partyNames[i],\\n                _partyTwitterHandles[i],\\n                _partyAddresses[i],\\n                false // The promise is being initialized, no need to reset approval status\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Approve the promise as a participant\\n     */\\n\\n    function approvePromise() public onlyParticipant onlyUnlocked {\\n        if (s_approvedParties[msg.sender] == true) {\\n            revert PromiseContract__approvePromise__ALREADY_APPROVED();\\n        }\\n\\n        s_approvedParties[msg.sender] = true;\\n        emit ParticipantApproved(\\n            s_parties[msg.sender].participantName,\\n            s_parties[msg.sender].participantTwitterHandle,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @notice Validate the promise and lock it so that no more participants can change any state\\n     * or even try to and lose gas\\n     */\\n\\n    function lockPromise() public onlyParticipant onlyUnlocked {\\n        address[] memory participantAddresses = s_participantAddresses;\\n\\n        // Loop through the parties and check if anyone has not approved yet\\n        for (uint256 i = 0; i < s_participantCount; i++) {\\n            if (s_approvedParties[participantAddresses[i]] == false) {\\n                revert PromiseContract__lockPromise__PARTICIPANT_NOT_APPROVED();\\n            }\\n        }\\n\\n        s_promiseLocked = true;\\n        emit PromiseLocked();\\n    }\\n\\n    /**\\n     * @notice Create a new participant and add them to the mapping\\n     * @dev This function can only be called by the Promise Factory\\n     * @param _participantName The name of the participant\\n     * @param _participantTwitterHandle The twitter handle of the participant\\n     * @param _participantAddress The address of the participant\\n     * @param _resetApprovalStatus Whether or not to reset the approval status of the participants\\n     * -> true if a participant is being added after the promise creation\\n     */\\n\\n    function createParticipant(\\n        string memory _participantName,\\n        string memory _participantTwitterHandle,\\n        address _participantAddress,\\n        bool _resetApprovalStatus\\n    ) public onlyPromiseFactory onlyUnlocked {\\n        // Revert if the name is not between 2 and 30 characters\\n        if (\\n            bytes(_participantName).length < 2 ||\\n            bytes(_participantName).length > 30\\n        ) {\\n            revert PromiseContract__createParticipant__INCORRECT_FIELD_LENGTH();\\n        }\\n        Participant memory participant = Participant(\\n            _participantName,\\n            _participantTwitterHandle,\\n            _participantAddress\\n        );\\n        s_parties[_participantAddress] = participant;\\n        s_participantAddresses.push(_participantAddress);\\n        s_participantCount++;\\n\\n        // Make sure the promise gets disapproved for every participants\\n        // In case a new participant is added, they will need to approve it again\\n        // We just need to do this if a participant is being added, not at the initialization\\n        if (_resetApprovalStatus) {\\n            address[] memory participantAddresses = s_participantAddresses;\\n\\n            for (uint256 i = 0; i < s_participantCount; i++) {\\n                // Set the approval to false if it's been approved already\\n                if (s_approvedParties[participantAddresses[i]] == true) {\\n                    s_approvedParties[participantAddresses[i]] = false;\\n                }\\n            }\\n        }\\n\\n        emit ParticipantCreated(\\n            _participantName,\\n            _participantTwitterHandle,\\n            _participantAddress\\n        );\\n    }\\n\\n    /**\\n     * @notice Update the storage status of the promise\\n     * @dev This function can only be called by the Promise Factory\\n     * @param _storageStatus The new storage status of the promise\\n     * - 1 -> the provided IPFS and eventually Arweave hashes could not be verified\\n     * - 2 -> only the IPFS hash has been provided and verified\\n     * - 3 -> both the IPFS & Arweave hashes has been provided and verified\\n     */\\n\\n    function updateStorageStatus(uint8 _storageStatus)\\n        public\\n        onlyPromiseFactory\\n    {\\n        if (_storageStatus < 1 || _storageStatus > 3) {\\n            revert PromiseContract__updateStorageStatus__INVALID_STATUS();\\n        }\\n\\n        s_storageStatus = _storageStatus;\\n        emit PromiseStorageStatusUpdated(_storageStatus);\\n    }\\n\\n    /// Getters\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getName() public view returns (string memory) {\\n        return s_promiseName;\\n    }\\n\\n    function getIpfsCid() public view returns (string memory) {\\n        return s_ipfsCid;\\n    }\\n\\n    function getArweaveId() public view returns (string memory) {\\n        return s_arweaveId;\\n    }\\n\\n    function getEncryptedProof() public view returns (string memory) {\\n        return s_encryptedProof;\\n    }\\n\\n    function getStorageStatus() public view returns (uint8) {\\n        return s_storageStatus;\\n    }\\n\\n    function getParticipant(address _address)\\n        public\\n        view\\n        returns (Participant memory)\\n    {\\n        return s_parties[_address];\\n    }\\n\\n    function getIsParticipant(address _participantAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        if (s_parties[_participantAddress].participantAddress == address(0)) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    function getParticipantCount() public view returns (uint256) {\\n        return s_participantCount;\\n    }\\n\\n    function getIsPromiseApproved(address _participantAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return s_approvedParties[_participantAddress];\\n    }\\n\\n    function getIsPromiseLocked() public view returns (bool) {\\n        return s_promiseLocked;\\n    }\\n\\n    function getPromiseFactoryContract() public view returns (address) {\\n        return i_promiseFactoryContract;\\n    }\\n}\\n\",\"keccak256\":\"0x29871a705d18925299f294b86974cd269ef7b1312d639df2c1b45a6778393265\",\"license\":\"MIT\"},\"contracts/PromiseFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./PromiseContract.sol\\\";\\nimport \\\"./IVerifyStorage.sol\\\";\\n\\n/**\\n * @author polarzero\\n * @title PromiseFactory\\n * @notice This is the factory contract initializing & referencing all promises\\n * @dev This contract is the only one that can create new promises\\n * For a successful flow, the following steps are recommended:\\n * 1. Deploy the PromiseFactory contract\\n * 2. Deploy the verifiers (VerifyStorage, VerifyTwitter)\\n * 3. Set the verifiers in the PromiseFactory contract\\n * 4. Fund the verifiers with LINK\\n * 5. Deploy a new promise contract\\n * * Only via the App can the promises be successfully verified by the VerifyStorage contract\\n * * If you want to reproduce this verification, you will need your own External Adapter,\\n * * and an interface that both encrypt/decrypt the IPFS & Arweave hashes with the same\\n * * encryption key. More details in the documentation.\\n */\\n\\ncontract PromiseFactory {\\n    /// Errors\\n    error PromiseFactory__EMPTY_FIELD();\\n    error PromiseFactory__INCORRECT_FIELD_LENGTH();\\n    error PromiseFactory__createPromiseContract__DUPLICATE_FIELD();\\n    error PromiseFactory__addParticipant__NOT_PARTICIPANT();\\n    error PromiseFactory__addParticipant__ALREADY_PARTICIPANT();\\n    error PromiseFactory__NOT_OWNER();\\n    error PromiseFactory__NOT_VERIFIER();\\n\\n    /// Variables\\n    address private immutable i_owner;\\n    // The VerifyTwitter contract\\n    address private s_twitterVerifier;\\n    // The VerifyStorage contract\\n    address private s_storageVerifier;\\n\\n    // Map the owner addresses to the child contracts they created\\n    mapping(address => PromiseContract[]) private s_promiseContracts;\\n\\n    // Map the user addresses to their verified Twitter account(s)\\n    mapping(address => string[]) private s_twitterVerifiedUsers;\\n\\n    /// Events\\n    // Emitted when a new PromiseContract is created\\n    event PromiseContractCreated(\\n        address indexed _owner,\\n        address indexed _contractAddress,\\n        string _promiseName,\\n        string _ipfsCid,\\n        string _arweaveId,\\n        string encryptedProof,\\n        string[] _partyNames,\\n        string[] _partyTwitterHandles,\\n        address[] _partyAddresses\\n    );\\n\\n    // Emitted when a user was successfully verified by the VerifyTwitter contract\\n    event TwitterAddVerifiedSuccessful(\\n        address indexed _owner,\\n        string _twitterHandle\\n    );\\n\\n    // Emitted when a user was added to a PromiseContract\\n    event ParticipantAdded(\\n        address indexed _contractAddress,\\n        string _participantName,\\n        string _participantTwitterHandle,\\n        address _participantAddress\\n    );\\n\\n    // Emitted when a contract has just been created\\n    // and a storage update request was sent to the VerifyStorage contract\\n    event StorageStatusUpdateRequested(address promiseContract);\\n\\n    // Emitted when the storage status has been updated (to 1 - 3)\\n    event StorageStatusUpdated(\\n        address indexed _contractAddress,\\n        uint8 _storageStatus\\n    );\\n\\n    /// Modifiers\\n    modifier onlyOwner() {\\n        // msg sender should be the deployer of the contract\\n        if (msg.sender != i_owner) {\\n            revert PromiseFactory__NOT_OWNER();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyTwitterVerifier() {\\n        if (msg.sender != s_twitterVerifier) {\\n            revert PromiseFactory__NOT_VERIFIER();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyStorageVerifier() {\\n        if (msg.sender != s_storageVerifier) {\\n            revert PromiseFactory__NOT_VERIFIER();\\n        }\\n        _;\\n    }\\n\\n    /// Functions\\n\\n    /**\\n     * @notice Initialize the contract\\n     */\\n\\n    constructor() {\\n        i_owner = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Create a new contract and add it to the list of child contracts\\n     * @param _promiseName The name of the contract specified by the user\\n     * @param _ipfsCid The CID of the directory stored on IPFS\\n     * @param _arweaveId The ID of the zip stored on Arweave\\n     * @param _encryptedProof The encrypted string of the promise name, user\\n     * address, IPFS and Arweave hashes\\n     * @param _partyNames The names of the parties specified by the user\\n     * @param _partyTwitterHandles The Twitter handles of the parties specified by the user\\n     * @param _partyAddresses The addresses specified by the user that will be allowed to interact\\n     * with the contract\\n     */\\n\\n    function createPromiseContract(\\n        string memory _promiseName,\\n        string memory _ipfsCid,\\n        string memory _arweaveId,\\n        string memory _encryptedProof,\\n        string[] memory _partyNames,\\n        string[] memory _partyTwitterHandles,\\n        address[] memory _partyAddresses\\n    ) public returns (address promiseContractAddress) {\\n        // Revert if one of the fields is empty\\n        if (\\n            !(bytes(_promiseName).length > 0 &&\\n                bytes(_ipfsCid).length > 0 &&\\n                _partyNames.length > 0 &&\\n                _partyTwitterHandles.length > 0 &&\\n                _partyAddresses.length > 0)\\n        ) revert PromiseFactory__EMPTY_FIELD();\\n\\n        // Revert if the number of names, Twitter and addresses are not equal\\n        // If Twitter handles are not provided, it will pass an empty string\\n        if (\\n            !(_partyAddresses.length == _partyTwitterHandles.length &&\\n                _partyAddresses.length == _partyNames.length)\\n        ) revert PromiseFactory__INCORRECT_FIELD_LENGTH();\\n\\n        // Revert if the same address or twitter handle is used twice\\n        for (uint256 i = 0; i < _partyAddresses.length; i++) {\\n            for (uint256 j = i + 1; j < _partyAddresses.length; j++) {\\n                if (\\n                    _partyAddresses[i] == _partyAddresses[j] ||\\n                    keccak256(abi.encodePacked(_partyTwitterHandles[i])) ==\\n                    keccak256(abi.encodePacked(_partyTwitterHandles[j]))\\n                )\\n                    revert PromiseFactory__createPromiseContract__DUPLICATE_FIELD();\\n            }\\n        }\\n\\n        // We could test the validity of the Twitter handles here, but it would not really matter\\n        // since it won't have any value without being verified, and the verification already\\n        // needs it to be valid\\n\\n        // Revert if the name of the promise is longer than 70 characters\\n        if (bytes(_promiseName).length > 70) {\\n            revert PromiseFactory__INCORRECT_FIELD_LENGTH();\\n        }\\n\\n        // We don't need to check the length of the Twitter handles\\n        // If any were to be invalid, they would fail to get verified\\n\\n        // We can't make sure the provided CID is valid,\\n        // because it could be provided either in a Base58 or Base32 format\\n        // but it will be shown in the UI\\n\\n        // Create a new contract for this promise\\n        PromiseContract promiseContract = new PromiseContract(\\n            msg.sender,\\n            _promiseName,\\n            _ipfsCid,\\n            _arweaveId,\\n            _encryptedProof,\\n            _partyNames,\\n            _partyTwitterHandles,\\n            _partyAddresses\\n        );\\n        s_promiseContracts[msg.sender].push(promiseContract);\\n\\n        emit PromiseContractCreated(\\n            msg.sender,\\n            address(promiseContract),\\n            _promiseName,\\n            _ipfsCid,\\n            _arweaveId,\\n            _encryptedProof,\\n            _partyNames,\\n            _partyTwitterHandles,\\n            _partyAddresses\\n        );\\n\\n        // Request a storage status update to the VerifyStorage contract\\n        IVerifyStorage(s_storageVerifier).requestStorageStatusUpdate(\\n            address(promiseContract),\\n            msg.sender,\\n            _ipfsCid,\\n            _arweaveId,\\n            _encryptedProof\\n        );\\n        emit StorageStatusUpdateRequested(address(promiseContract));\\n\\n        return address(promiseContract);\\n    }\\n\\n    /**\\n     * @notice Add a participant to a promise contract\\n     * @dev Only a participant of the contract can call this function\\n     * @dev It can only be called if the contract is not locked (the child contract takes care of that)\\n     * @param _promiseContractAddress The address of the promise contract\\n     * @param _partyName The name of the party\\n     * @param _partyTwitterHandle The Twitter handle of the party\\n     * @param _partyAddress The address of the party\\n     */\\n\\n    function addParticipant(\\n        address _promiseContractAddress,\\n        string memory _partyName,\\n        string memory _partyTwitterHandle,\\n        address _partyAddress\\n    ) public {\\n        // Revert if the sender is not a participant of the contract\\n        if (\\n            !PromiseContract(_promiseContractAddress).getIsParticipant(\\n                msg.sender\\n            )\\n        ) {\\n            revert PromiseFactory__addParticipant__NOT_PARTICIPANT();\\n        }\\n\\n        // Revert if the user to add is already a participant of the contract\\n        if (\\n            PromiseContract(_promiseContractAddress).getIsParticipant(\\n                _partyAddress\\n            )\\n        ) {\\n            revert PromiseFactory__addParticipant__ALREADY_PARTICIPANT();\\n        }\\n\\n        // Revert if the name of the party is longer than 30 characters\\n        if (bytes(_partyName).length > 30) {\\n            revert PromiseFactory__INCORRECT_FIELD_LENGTH();\\n        }\\n\\n        // Add the participant to the contract and emit an event\\n        PromiseContract(_promiseContractAddress).createParticipant(\\n            _partyName,\\n            _partyTwitterHandle,\\n            _partyAddress,\\n            true // Reset the approval status\\n        );\\n\\n        emit ParticipantAdded(\\n            _promiseContractAddress,\\n            _partyName,\\n            _partyTwitterHandle,\\n            _partyAddress\\n        );\\n    }\\n\\n    /**\\n     * @notice Add a verified Twitter account to the list of verified accounts\\n     * @dev Only the verifier contract can call this function, after the account\\n     * has been verified with the Chainlink Node + External Adapter\\n     * @param _userAddress The address of the user\\n     * @param _twitterHandle The Twitter handle of the verified account\\n     */\\n\\n    function addTwitterVerifiedUser(\\n        address _userAddress,\\n        string memory _twitterHandle\\n    ) external onlyTwitterVerifier {\\n        // If the user address doesn't have a verified account yet, create a new array\\n        if (s_twitterVerifiedUsers[_userAddress].length == 0) {\\n            s_twitterVerifiedUsers[_userAddress] = new string[](1);\\n            // Add the verified account to the array\\n            s_twitterVerifiedUsers[_userAddress][0] = _twitterHandle;\\n        } else if (s_twitterVerifiedUsers[_userAddress].length > 0) {\\n            string[] memory verifiedAccounts = s_twitterVerifiedUsers[\\n                _userAddress\\n            ];\\n            for (uint256 i = 0; i < verifiedAccounts.length; i++) {\\n                // If the user already verified this account, revert\\n                if (\\n                    keccak256(abi.encodePacked(verifiedAccounts[i])) ==\\n                    keccak256(abi.encodePacked(_twitterHandle))\\n                ) {\\n                    emit TwitterAddVerifiedSuccessful(\\n                        _userAddress,\\n                        _twitterHandle\\n                    );\\n                    return;\\n                }\\n            }\\n            // But if it is not included, add it\\n            s_twitterVerifiedUsers[_userAddress].push(_twitterHandle);\\n        }\\n\\n        emit TwitterAddVerifiedSuccessful(_userAddress, _twitterHandle);\\n    }\\n\\n    /**\\n     * @notice Update the storage status of a promise contract\\n     * @dev Only the verifier contract can call this function, after the storage\\n     * has been verified with the Chainlink Node + External Adapter\\n     * @dev This step could as well be avoided for better optimization, since\\n     * VerifyStorage could directly call the PromiseContract to update its status\\n     * BUT we want to do it this way, because:\\n     * - it helps us keep this PromiseFactory contract as a mediator, which\\n     * allows for better event tracking & easier security measures\\n     * - it is not a major flaw in terms of gas usage, as long as we're deploying\\n     * on a L2 solution\\n     * @param _promiseContractAddress The address of the promise contract\\n     * @param _storageStatus The new storage status\\n     * -> 1 = failed, 2 = IPFS provided & verified, 3 = IPFS + Arweave provided & verified\\n     */\\n\\n    function updateStorageStatus(\\n        address _promiseContractAddress,\\n        uint8 _storageStatus\\n    ) external onlyStorageVerifier {\\n        PromiseContract(_promiseContractAddress).updateStorageStatus(\\n            _storageStatus\\n        );\\n        emit StorageStatusUpdated(_promiseContractAddress, _storageStatus);\\n    }\\n\\n    /// Setters\\n    function setTwitterVerifier(address _twitterVerifier) external onlyOwner {\\n        s_twitterVerifier = _twitterVerifier;\\n    }\\n\\n    function setStorageVerifier(address _storageVerifier) external onlyOwner {\\n        s_storageVerifier = _storageVerifier;\\n    }\\n\\n    /// Getters\\n    function getPromiseContractAddresses(address _owner)\\n        public\\n        view\\n        returns (PromiseContract[] memory)\\n    {\\n        return s_promiseContracts[_owner];\\n    }\\n\\n    function getPromiseContractCount(address _userAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_promiseContracts[_userAddress].length;\\n    }\\n\\n    function getTwitterVerifiedHandle(address _userAddress)\\n        public\\n        view\\n        returns (string[] memory)\\n    {\\n        // Return the username if the user has a verified account\\n        if (s_twitterVerifiedUsers[_userAddress].length > 0) {\\n            return s_twitterVerifiedUsers[_userAddress];\\n        } else {\\n            // Return an empty array\\n            string[] memory usernames = new string[](0);\\n            return usernames;\\n        }\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getTwitterVerifier() public view returns (address) {\\n        return s_twitterVerifier;\\n    }\\n\\n    function getStorageVerifier() public view returns (address) {\\n        return s_storageVerifier;\\n    }\\n}\\n\",\"keccak256\":\"0x62c617aac3174d39b6c6009330c15bdd1307da2399646cb9290e02bafcc9e374\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060805161564361006e6000396000818161031f015281816103e801526104b401526156436000f3fe60806040523480156200001157600080fd5b5060043610620000c45760003560e01c8063a2d0095e116200007b578063a2d0095e14620001b9578063c4fd186414620001d9578063d210fee314620001f9578063d488f9a0146200022f578063e2b58e621462000265578063e31db573146200028757620000c4565b80634784336f14620000c9578063531e67e214620000ff578063560873a714620001215780636e1e19211462000141578063893d20e814620001615780639e9e84f91462000183575b600080fd5b620000e76004803603810190620000e19190620016b6565b620002a7565b604051620000f6919062001703565b60405180910390f35b62000109620002f3565b60405162000118919062001731565b60405180910390f35b6200013f6004803603810190620001399190620016b6565b6200031d565b005b6200015f6004803603810190620001599190620016b6565b620003e6565b005b6200016b620004b0565b6040516200017a919062001731565b60405180910390f35b620001a160048036038101906200019b919062001a82565b620004d8565b604051620001b0919062001731565b60405180910390f35b620001d76004803603810190620001d1919062001c4c565b620009a2565b005b620001f76004803603810190620001f1919062001c93565b62000aec565b005b620002176004803603810190620002119190620016b6565b62000d66565b60405162000226919062001e6b565b60405180910390f35b6200024d6004803603810190620002479190620016b6565b62000e35565b6040516200025c919062001fe8565b60405180910390f35b6200026f62001005565b6040516200027e919062001731565b60405180910390f35b620002a560048036038101906200029f91906200200c565b6200102e565b005b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620003a3576040517fadf438e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200046c576040517fadf438e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000808851118015620004ec575060008751115b8015620004fa575060008451115b801562000508575060008351115b801562000516575060008251115b6200054d576040517feaf3bd8900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8251825114801562000560575083518251145b62000597576040517f35e961c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b825181101562000725576000600182620005b59190620020a1565b90505b83518110156200070e57838181518110620005d857620005d7620020dc565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168483815181106200060c576200060b620020dc565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161480620006c05750848181518110620006485762000647620020dc565b5b60200260200101516040516020016200066291906200214d565b604051602081830303815290604052805190602001208583815181106200068e576200068d620020dc565b5b6020026020010151604051602001620006a891906200214d565b60405160208183030381529060405280519060200120145b15620006f8576040517f301cd94e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8080620007059062002166565b915050620005b8565b5080806200071c9062002166565b9150506200059a565b5060468851111562000763576040517f35e961c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600033898989898989896040516200077b9062001542565b6200078e989796959493929190620022c2565b604051809103906000f080158015620007ab573d6000803e3d6000fd5b509050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fb088250606fcd5a658357714719acdeff3339105904ccfd3d66d8e26f79bb7728b8b8b8b8b8b8b604051620008b9979695949392919062002381565b60405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398b6407d82338b8b8b6040518663ffffffff1660e01b8152600401620009269594939291906200242f565b600060405180830381600087803b1580156200094157600080fd5b505af115801562000956573d6000803e3d6000fd5b505050507f35593e44ccbb372b5ae22d5aa930cd9bc26bc2c92af3cf4a5eb072106715b009816040516200098b919062001731565b60405180910390a180915050979650505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000a29576040517e11415300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16637d2ef5e7826040518263ffffffff1660e01b815260040162000a649190620024b2565b600060405180830381600087803b15801562000a7f57600080fd5b505af115801562000a94573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167ff800f6157e7c2af6e3b95f2e5980398b6486bcdb01eed234427f3c60dfc2c4668260405162000ae09190620024b2565b60405180910390a25050565b8373ffffffffffffffffffffffffffffffffffffffff166399ae1ec2336040518263ffffffff1660e01b815260040162000b27919062001731565b602060405180830381865afa15801562000b45573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b6b91906200250c565b62000ba2576040517f473da96a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166399ae1ec2826040518263ffffffff1660e01b815260040162000bdd919062001731565b602060405180830381865afa15801562000bfb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c2191906200250c565b1562000c59576040517fbba97c9c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601e8351111562000c96576040517f35e961c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166319c953df84848460016040518563ffffffff1660e01b815260040162000cd894939291906200254f565b600060405180830381600087803b15801562000cf357600080fd5b505af115801562000d08573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167fca8be768c3e2ef69996f18134c17e8f458e3149408ddf4b162cc2a4c48d871a484848460405162000d5893929190620025aa565b60405180910390a250505050565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801562000e2957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000dde575b50505050509050919050565b60606000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050111562000fa457600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101562000f9857838290600052602060002001805462000f049062002624565b80601f016020809104026020016040519081016040528092919081815260200182805462000f329062002624565b801562000f835780601f1062000f575761010080835404028352916020019162000f83565b820191906000526020600020905b81548152906001019060200180831162000f6557829003601f168201915b50505050508152602001906001019062000ee2565b50505050905062001000565b60008067ffffffffffffffff81111562000fc35762000fc262001769565b5b60405190808252806020026020018201604052801562000ff857816020015b606081526020019060019003908162000fe25790505b509050809150505b919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620010b3576040517e11415300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050036200121c57600167ffffffffffffffff8111156200111c576200111b62001769565b5b6040519080825280602002602001820160405280156200115157816020015b60608152602001906001900390816200113b5790505b50600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190620011a692919062001550565b5080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548110620011fd57620011fc620020dc565b5b90600052602060002001908162001215919062002821565b50620014ed565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490501115620014ec576000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156200137f578382906000526020600020018054620012eb9062002624565b80601f0160208091040260200160405190810160405280929190818152602001828054620013199062002624565b80156200136a5780601f106200133e576101008083540402835291602001916200136a565b820191906000526020600020905b8154815290600101906020018083116200134c57829003601f168201915b505050505081526020019060010190620012c9565b50505050905060005b8151811015620014755782604051602001620013a591906200214d565b60405160208183030381529060405280519060200120828281518110620013d157620013d0620020dc565b5b6020026020010151604051602001620013eb91906200214d565b60405160208183030381529060405280519060200120036200145f578373ffffffffffffffffffffffffffffffffffffffff167fb84b5dc40da8cd280dee1aaf74b3abbd449725a972daf3ad8cbc9d0adc089eff846040516200144f919062002908565b60405180910390a250506200153e565b80806200146c9062002166565b91505062001388565b50600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505060019003906000526020600020016000909190919091509081620014e9919062002821565b50505b5b8173ffffffffffffffffffffffffffffffffffffffff167fb84b5dc40da8cd280dee1aaf74b3abbd449725a972daf3ad8cbc9d0adc089eff8260405162001535919062002908565b60405180910390a25b5050565b612ce1806200292d83390190565b8280548282559060005260206000209081019282156200159d579160200282015b828111156200159c5782518290816200158b919062002821565b509160200191906001019062001571565b5b509050620015ac9190620015b0565b5090565b5b80821115620015d45760008181620015ca9190620015d8565b50600101620015b1565b5090565b508054620015e69062002624565b6000825580601f10620015fa57506200161b565b601f0160209004906000526020600020908101906200161a91906200161e565b5b50565b5b80821115620016395760008160009055506001016200161f565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200167e8262001651565b9050919050565b620016908162001671565b81146200169c57600080fd5b50565b600081359050620016b08162001685565b92915050565b600060208284031215620016cf57620016ce62001647565b5b6000620016df848285016200169f565b91505092915050565b6000819050919050565b620016fd81620016e8565b82525050565b60006020820190506200171a6000830184620016f2565b92915050565b6200172b8162001671565b82525050565b600060208201905062001748600083018462001720565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620017a38262001758565b810181811067ffffffffffffffff82111715620017c557620017c462001769565b5b80604052505050565b6000620017da6200163d565b9050620017e8828262001798565b919050565b600067ffffffffffffffff8211156200180b576200180a62001769565b5b620018168262001758565b9050602081019050919050565b82818337600083830152505050565b6000620018496200184384620017ed565b620017ce565b90508281526020810184848401111562001868576200186762001753565b5b6200187584828562001823565b509392505050565b600082601f8301126200189557620018946200174e565b5b8135620018a784826020860162001832565b91505092915050565b600067ffffffffffffffff821115620018ce57620018cd62001769565b5b602082029050602081019050919050565b600080fd5b6000620018fb620018f584620018b0565b620017ce565b90508083825260208201905060208402830185811115620019215762001920620018df565b5b835b818110156200196f57803567ffffffffffffffff8111156200194a57620019496200174e565b5b8086016200195989826200187d565b8552602085019450505060208101905062001923565b5050509392505050565b600082601f8301126200199157620019906200174e565b5b8135620019a3848260208601620018e4565b91505092915050565b600067ffffffffffffffff821115620019ca57620019c962001769565b5b602082029050602081019050919050565b6000620019f2620019ec84620019ac565b620017ce565b9050808382526020820190506020840283018581111562001a185762001a17620018df565b5b835b8181101562001a45578062001a3088826200169f565b84526020840193505060208101905062001a1a565b5050509392505050565b600082601f83011262001a675762001a666200174e565b5b813562001a79848260208601620019db565b91505092915050565b600080600080600080600060e0888a03121562001aa45762001aa362001647565b5b600088013567ffffffffffffffff81111562001ac55762001ac46200164c565b5b62001ad38a828b016200187d565b975050602088013567ffffffffffffffff81111562001af75762001af66200164c565b5b62001b058a828b016200187d565b965050604088013567ffffffffffffffff81111562001b295762001b286200164c565b5b62001b378a828b016200187d565b955050606088013567ffffffffffffffff81111562001b5b5762001b5a6200164c565b5b62001b698a828b016200187d565b945050608088013567ffffffffffffffff81111562001b8d5762001b8c6200164c565b5b62001b9b8a828b0162001979565b93505060a088013567ffffffffffffffff81111562001bbf5762001bbe6200164c565b5b62001bcd8a828b0162001979565b92505060c088013567ffffffffffffffff81111562001bf15762001bf06200164c565b5b62001bff8a828b0162001a4f565b91505092959891949750929550565b600060ff82169050919050565b62001c268162001c0e565b811462001c3257600080fd5b50565b60008135905062001c468162001c1b565b92915050565b6000806040838503121562001c665762001c6562001647565b5b600062001c76858286016200169f565b925050602062001c898582860162001c35565b9150509250929050565b6000806000806080858703121562001cb05762001caf62001647565b5b600062001cc0878288016200169f565b945050602085013567ffffffffffffffff81111562001ce45762001ce36200164c565b5b62001cf2878288016200187d565b935050604085013567ffffffffffffffff81111562001d165762001d156200164c565b5b62001d24878288016200187d565b925050606062001d37878288016200169f565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b600062001d9a62001d9462001d8e8462001651565b62001d6f565b62001651565b9050919050565b600062001dae8262001d79565b9050919050565b600062001dc28262001da1565b9050919050565b62001dd48162001db5565b82525050565b600062001de8838362001dc9565b60208301905092915050565b6000602082019050919050565b600062001e0e8262001d43565b62001e1a818562001d4e565b935062001e278362001d5f565b8060005b8381101562001e5e57815162001e42888262001dda565b975062001e4f8362001df4565b92505060018101905062001e2b565b5085935050505092915050565b6000602082019050818103600083015262001e87818462001e01565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562001ef757808201518184015260208101905062001eda565b60008484015250505050565b600062001f108262001ebb565b62001f1c818562001ec6565b935062001f2e81856020860162001ed7565b62001f398162001758565b840191505092915050565b600062001f52838362001f03565b905092915050565b6000602082019050919050565b600062001f748262001e8f565b62001f80818562001e9a565b93508360208202850162001f948562001eab565b8060005b8581101562001fd6578484038952815162001fb4858262001f44565b945062001fc18362001f5a565b925060208a0199505060018101905062001f98565b50829750879550505050505092915050565b6000602082019050818103600083015262002004818462001f67565b905092915050565b6000806040838503121562002026576200202562001647565b5b600062002036858286016200169f565b925050602083013567ffffffffffffffff8111156200205a57620020596200164c565b5b62002068858286016200187d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620020ae82620016e8565b9150620020bb83620016e8565b9250828201905080821115620020d657620020d562002072565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b6000620021238262001ebb565b6200212f81856200210b565b93506200214181856020860162001ed7565b80840191505092915050565b60006200215b828462002116565b915081905092915050565b60006200217382620016e8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620021a857620021a762002072565b5b600182019050919050565b600082825260208201905092915050565b6000620021d18262001ebb565b620021dd8185620021b3565b9350620021ef81856020860162001ed7565b620021fa8162001758565b840191505092915050565b600081519050919050565b6000819050602082019050919050565b6200222b8162001671565b82525050565b60006200223f838362002220565b60208301905092915050565b6000602082019050919050565b6000620022658262002205565b62002271818562001d4e565b93506200227e8362002210565b8060005b83811015620022b557815162002299888262002231565b9750620022a6836200224b565b92505060018101905062002282565b5085935050505092915050565b600061010082019050620022da600083018b62001720565b8181036020830152620022ee818a620021c4565b90508181036040830152620023048189620021c4565b905081810360608301526200231a8188620021c4565b90508181036080830152620023308187620021c4565b905081810360a083015262002346818662001f67565b905081810360c08301526200235c818562001f67565b905081810360e083015262002372818462002258565b90509998505050505050505050565b600060e08201905081810360008301526200239d818a620021c4565b90508181036020830152620023b38189620021c4565b90508181036040830152620023c98188620021c4565b90508181036060830152620023df8187620021c4565b90508181036080830152620023f5818662001f67565b905081810360a08301526200240b818562001f67565b905081810360c083015262002421818462002258565b905098975050505050505050565b600060a08201905062002446600083018862001720565b62002455602083018762001720565b8181036040830152620024698186620021c4565b905081810360608301526200247f8185620021c4565b90508181036080830152620024958184620021c4565b90509695505050505050565b620024ac8162001c0e565b82525050565b6000602082019050620024c96000830184620024a1565b92915050565b60008115159050919050565b620024e681620024cf565b8114620024f257600080fd5b50565b6000815190506200250681620024db565b92915050565b60006020828403121562002525576200252462001647565b5b60006200253584828501620024f5565b91505092915050565b6200254981620024cf565b82525050565b600060808201905081810360008301526200256b8187620021c4565b90508181036020830152620025818186620021c4565b905062002592604083018562001720565b620025a160608301846200253e565b95945050505050565b60006060820190508181036000830152620025c68186620021c4565b90508181036020830152620025dc8185620021c4565b9050620025ed604083018462001720565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200263d57607f821691505b602082108103620026535762002652620025f5565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620026bd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200267e565b620026c986836200267e565b95508019841693508086168417925050509392505050565b600062002702620026fc620026f684620016e8565b62001d6f565b620016e8565b9050919050565b6000819050919050565b6200271e83620026e1565b620027366200272d8262002709565b8484546200268b565b825550505050565b600090565b6200274d6200273e565b6200275a81848462002713565b505050565b5b8181101562002782576200277660008262002743565b60018101905062002760565b5050565b601f821115620027d1576200279b8162002659565b620027a6846200266e565b81016020851015620027b6578190505b620027ce620027c5856200266e565b8301826200275f565b50505b505050565b600082821c905092915050565b6000620027f660001984600802620027d6565b1980831691505092915050565b6000620028118383620027e3565b9150826002028217905092915050565b6200282c8262001ebb565b67ffffffffffffffff81111562002848576200284762001769565b5b62002854825462002624565b6200286182828562002786565b600060209050601f83116001811462002899576000841562002884578287015190505b62002890858262002803565b86555062002900565b601f198416620028a98662002659565b60005b82811015620028d357848901518255600182019150602085019450602081019050620028ac565b86831015620028f35784890151620028ef601f891682620027e3565b8355505b6001600288020188555050505b505050505050565b60006020820190508181036000830152620029248184620021c4565b90509291505056fe60c0604052600080556000600160006101000a81548160ff021916908360ff1602179055506000600760006101000a81548160ff0219169083151502179055503480156200004c57600080fd5b5060405162002ce138038062002ce18339818101604052810190620000729190620009ef565b3373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508773ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508660029081620000eb919062000ddc565b508560039081620000fd919062000ddc565b5084600490816200010f919062000ddc565b50836005908162000121919062000ddc565b5060005b8151811015620001b1576200019b84828151811062000149576200014862000ec3565b5b602002602001015184838151811062000167576200016662000ec3565b5b602002602001015184848151811062000185576200018462000ec3565b5b60200260200101516000620001c060201b60201c565b8080620001a89062000f21565b91505062000125565b50505050505050505062000ffb565b60a05173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000228576040517feee85f7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760009054906101000a900460ff161562000270576040517f6bbe2df800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600284511080620002825750601e8451115b15620002ba576040517ffce3699600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180606001604052808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815250905080600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908162000346919062000ddc565b5060208201518160010190816200035e919062000ddc565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506006839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080815480929190620004209062000f21565b91905055508115620005cc5760006006805480602002602001604051908101604052809291908181526020018280548015620004b257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000467575b5050505050905060005b600054811015620005c9576001151560096000848481518110620004e557620004e462000ec3565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503620005b35760006009600084848151811062000559576200055862000ec3565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b8080620005c09062000f21565b915050620004bc565b50505b8273ffffffffffffffffffffffffffffffffffffffff167fd76352dcc1f8336c0abdec06ee73330eee3e75ba620ba2c87510a25a32439d4e86866040516200061692919062000fc0565b60405180910390a25050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620006668262000639565b9050919050565b620006788162000659565b81146200068457600080fd5b50565b60008151905062000698816200066d565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620006f382620006a8565b810181811067ffffffffffffffff82111715620007155762000714620006b9565b5b80604052505050565b60006200072a62000625565b9050620007388282620006e8565b919050565b600067ffffffffffffffff8211156200075b576200075a620006b9565b5b6200076682620006a8565b9050602081019050919050565b60005b838110156200079357808201518184015260208101905062000776565b60008484015250505050565b6000620007b6620007b0846200073d565b6200071e565b905082815260208101848484011115620007d557620007d4620006a3565b5b620007e284828562000773565b509392505050565b600082601f8301126200080257620008016200069e565b5b8151620008148482602086016200079f565b91505092915050565b600067ffffffffffffffff8211156200083b576200083a620006b9565b5b602082029050602081019050919050565b600080fd5b60006200086862000862846200081d565b6200071e565b905080838252602082019050602084028301858111156200088e576200088d6200084c565b5b835b81811015620008dc57805167ffffffffffffffff811115620008b757620008b66200069e565b5b808601620008c68982620007ea565b8552602085019450505060208101905062000890565b5050509392505050565b600082601f830112620008fe57620008fd6200069e565b5b81516200091084826020860162000851565b91505092915050565b600067ffffffffffffffff821115620009375762000936620006b9565b5b602082029050602081019050919050565b60006200095f620009598462000919565b6200071e565b905080838252602082019050602084028301858111156200098557620009846200084c565b5b835b81811015620009b257806200099d888262000687565b84526020840193505060208101905062000987565b5050509392505050565b600082601f830112620009d457620009d36200069e565b5b8151620009e684826020860162000948565b91505092915050565b600080600080600080600080610100898b03121562000a135762000a126200062f565b5b600062000a238b828c0162000687565b985050602089015167ffffffffffffffff81111562000a475762000a4662000634565b5b62000a558b828c01620007ea565b975050604089015167ffffffffffffffff81111562000a795762000a7862000634565b5b62000a878b828c01620007ea565b965050606089015167ffffffffffffffff81111562000aab5762000aaa62000634565b5b62000ab98b828c01620007ea565b955050608089015167ffffffffffffffff81111562000add5762000adc62000634565b5b62000aeb8b828c01620007ea565b94505060a089015167ffffffffffffffff81111562000b0f5762000b0e62000634565b5b62000b1d8b828c01620008e6565b93505060c089015167ffffffffffffffff81111562000b415762000b4062000634565b5b62000b4f8b828c01620008e6565b92505060e089015167ffffffffffffffff81111562000b735762000b7262000634565b5b62000b818b828c01620009bc565b9150509295985092959890939650565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000be457607f821691505b60208210810362000bfa5762000bf962000b9c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262000c647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000c25565b62000c70868362000c25565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000cbd62000cb762000cb18462000c88565b62000c92565b62000c88565b9050919050565b6000819050919050565b62000cd98362000c9c565b62000cf162000ce88262000cc4565b84845462000c32565b825550505050565b600090565b62000d0862000cf9565b62000d1581848462000cce565b505050565b5b8181101562000d3d5762000d3160008262000cfe565b60018101905062000d1b565b5050565b601f82111562000d8c5762000d568162000c00565b62000d618462000c15565b8101602085101562000d71578190505b62000d8962000d808562000c15565b83018262000d1a565b50505b505050565b600082821c905092915050565b600062000db16000198460080262000d91565b1980831691505092915050565b600062000dcc838362000d9e565b9150826002028217905092915050565b62000de78262000b91565b67ffffffffffffffff81111562000e035762000e02620006b9565b5b62000e0f825462000bcb565b62000e1c82828562000d41565b600060209050601f83116001811462000e54576000841562000e3f578287015190505b62000e4b858262000dbe565b86555062000ebb565b601f19841662000e648662000c00565b60005b8281101562000e8e5784890151825560018201915060208501945060208101905062000e67565b8683101562000eae578489015162000eaa601f89168262000d9e565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000f2e8262000c88565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362000f635762000f6262000ef2565b5b600182019050919050565b600082825260208201905092915050565b600062000f8c8262000b91565b62000f98818562000f6e565b935062000faa81856020860162000773565b62000fb581620006a8565b840191505092915050565b6000604082019050818103600083015262000fdc818562000f7f565b9050818103602083015262000ff2818462000f7f565b90509392505050565b60805160a051611cb26200102f6000396000818161038301528181610ba50152610e0d01526000610f350152611cb26000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806372c0c0a81161009757806399ae1ec21161006657806399ae1ec214610267578063ad60572914610297578063d6781324146102b5578063ee9706ac146102bf57610100565b806372c0c0a8146102055780637b560fc2146102235780637d2ef5e71461022d578063893d20e81461024957610100565b806355d2be82116100d357806355d2be821461017b57806364336fcb1461019957806364fb931b146101b75780637143059f146101d557610100565b806317d7de7c1461010557806319c953df1461012357806354181ded1461013f578063545e1b521461015d575b600080fd5b61010d6102ef565b60405161011a919061134f565b60405180910390f35b61013d60048036038101906101389190611550565b610381565b005b6101476107ea565b604051610154919061134f565b60405180910390f35b61016561087c565b604051610172919061160b565b60405180910390f35b610183610893565b604051610190919061134f565b60405180910390f35b6101a1610925565b6040516101ae919061134f565b60405180910390f35b6101bf6109b7565b6040516101cc9190611635565b60405180910390f35b6101ef60048036038101906101ea9190611650565b6109ce565b6040516101fc919061172d565b60405180910390f35b61020d610ba1565b60405161021a919061175e565b60405180910390f35b61022b610bc9565b005b610247600480360381019061024291906117a5565b610e0b565b005b610251610f31565b60405161025e919061175e565b60405180910390f35b610281600480360381019061027c9190611650565b610f59565b60405161028e9190611635565b60405180910390f35b61029f611003565b6040516102ac91906117eb565b60405180910390f35b6102bd61100c565b005b6102d960048036038101906102d49190611650565b611232565b6040516102e69190611635565b60405180910390f35b6060600280546102fe90611835565b80601f016020809104026020016040519081016040528092919081815260200182805461032a90611835565b80156103775780601f1061034c57610100808354040283529160200191610377565b820191906000526020600020905b81548152906001019060200180831161035a57829003601f168201915b5050505050905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610406576040517feee85f7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760009054906101000a900460ff161561044d576040517f6bbe2df800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028451108061045e5750601e8451115b15610495576040517ffce3699600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180606001604052808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815250905080600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908161051f9190611a12565b5060208201518160010190816105359190611a12565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506006839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000808154809291906105f590611b13565b91905055508115610793576000600680548060200260200160405190810160405280929190818152602001828054801561068457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161063a575b5050505050905060005b6000548110156107905760011515600960008484815181106106b3576106b2611b5b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615150361077d5760006009600084848151811061072357610722611b5b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b808061078890611b13565b91505061068e565b50505b8273ffffffffffffffffffffffffffffffffffffffff167fd76352dcc1f8336c0abdec06ee73330eee3e75ba620ba2c87510a25a32439d4e86866040516107db929190611b8a565b60405180910390a25050505050565b6060600380546107f990611835565b80601f016020809104026020016040519081016040528092919081815260200182805461082590611835565b80156108725780601f1061084757610100808354040283529160200191610872565b820191906000526020600020905b81548152906001019060200180831161085557829003601f168201915b5050505050905090565b6000600160009054906101000a900460ff16905090565b6060600480546108a290611835565b80601f01602080910402602001604051908101604052809291908181526020018280546108ce90611835565b801561091b5780601f106108f05761010080835404028352916020019161091b565b820191906000526020600020905b8154815290600101906020018083116108fe57829003601f168201915b5050505050905090565b60606005805461093490611835565b80601f016020809104026020016040519081016040528092919081815260200182805461096090611835565b80156109ad5780601f10610982576101008083540402835291602001916109ad565b820191906000526020600020905b81548152906001019060200180831161099057829003601f168201915b5050505050905090565b6000600760009054906101000a900460ff16905090565b6109d6611288565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082018054610a3090611835565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5c90611835565b8015610aa95780601f10610a7e57610100808354040283529160200191610aa9565b820191906000526020600020905b815481529060010190602001808311610a8c57829003601f168201915b50505050508152602001600182018054610ac290611835565b80601f0160208091040260200160405190810160405280929190818152602001828054610aee90611835565b8015610b3b5780601f10610b1057610100808354040283529160200191610b3b565b820191906000526020600020905b815481529060010190602001808311610b1e57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000610bd433610f59565b905080610c0d576040517ffccacf3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760009054906101000a900460ff1615610c54576040517f6bbe2df800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503610cde576040517f3b4b7dcf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f26c25af05520e978d353f976c99fa4c277ddc75aed4170ec47c9e24f06e62a1c600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101604051610e00929190611c45565b60405180910390a250565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e90576040517feee85f7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018160ff161080610ea5575060038160ff16115b15610edc576040517ffaa3262300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548160ff021916908360ff1602179055507f12ccb854d432ac960202ac0e6cb78d2bd11a925dd3e9aa4f6ede2705462e509981604051610f26919061160b565b60405180910390a150565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008073ffffffffffffffffffffffffffffffffffffffff16600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610ff95760009050610ffe565b600190505b919050565b60008054905090565b600061101733610f59565b905080611050576040517ffccacf3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760009054906101000a900460ff1615611097576040517f6bbe2df800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600680548060200260200160405190810160405280929190818152602001828054801561111b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116110d1575b5050505050905060005b6000548110156111e657600015156009600084848151811061114a57611149611b5b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515036111d3576040517fadba427200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80806111de90611b13565b915050611125565b506001600760006101000a81548160ff0219169083151502179055507f77b99c173854235e0f45948e541b3d590e15d05c680efbedc9c18bcb845aa01c60405160405180910390a15050565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60405180606001604052806060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600081519050919050565b600082825260208201905092915050565b60005b838110156112f95780820151818401526020810190506112de565b60008484015250505050565b6000601f19601f8301169050919050565b6000611321826112bf565b61132b81856112ca565b935061133b8185602086016112db565b61134481611305565b840191505092915050565b600060208201905081810360008301526113698184611316565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113c782611305565b810181811067ffffffffffffffff821117156113e6576113e561138f565b5b80604052505050565b60006113f9611371565b905061140582826113be565b919050565b600067ffffffffffffffff8211156114255761142461138f565b5b61142e82611305565b9050602081019050919050565b82818337600083830152505050565b600061145d6114588461140a565b6113ef565b9050828152602081018484840111156114795761147861138a565b5b61148484828561143b565b509392505050565b600082601f8301126114a1576114a0611385565b5b81356114b184826020860161144a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114e5826114ba565b9050919050565b6114f5816114da565b811461150057600080fd5b50565b600081359050611512816114ec565b92915050565b60008115159050919050565b61152d81611518565b811461153857600080fd5b50565b60008135905061154a81611524565b92915050565b6000806000806080858703121561156a5761156961137b565b5b600085013567ffffffffffffffff81111561158857611587611380565b5b6115948782880161148c565b945050602085013567ffffffffffffffff8111156115b5576115b4611380565b5b6115c18782880161148c565b93505060406115d287828801611503565b92505060606115e38782880161153b565b91505092959194509250565b600060ff82169050919050565b611605816115ef565b82525050565b600060208201905061162060008301846115fc565b92915050565b61162f81611518565b82525050565b600060208201905061164a6000830184611626565b92915050565b6000602082840312156116665761166561137b565b5b600061167484828501611503565b91505092915050565b600082825260208201905092915050565b6000611699826112bf565b6116a3818561167d565b93506116b38185602086016112db565b6116bc81611305565b840191505092915050565b6116d0816114da565b82525050565b600060608301600083015184820360008601526116f3828261168e565b9150506020830151848203602086015261170d828261168e565b915050604083015161172260408601826116c7565b508091505092915050565b6000602082019050818103600083015261174781846116d6565b905092915050565b611758816114da565b82525050565b6000602082019050611773600083018461174f565b92915050565b611782816115ef565b811461178d57600080fd5b50565b60008135905061179f81611779565b92915050565b6000602082840312156117bb576117ba61137b565b5b60006117c984828501611790565b91505092915050565b6000819050919050565b6117e5816117d2565b82525050565b600060208201905061180060008301846117dc565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061184d57607f821691505b6020821081036118605761185f611806565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026118c87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261188b565b6118d2868361188b565b95508019841693508086168417925050509392505050565b6000819050919050565b600061190f61190a611905846117d2565b6118ea565b6117d2565b9050919050565b6000819050919050565b611929836118f4565b61193d61193582611916565b848454611898565b825550505050565b600090565b611952611945565b61195d818484611920565b505050565b5b818110156119815761197660008261194a565b600181019050611963565b5050565b601f8211156119c65761199781611866565b6119a08461187b565b810160208510156119af578190505b6119c36119bb8561187b565b830182611962565b50505b505050565b600082821c905092915050565b60006119e9600019846008026119cb565b1980831691505092915050565b6000611a0283836119d8565b9150826002028217905092915050565b611a1b826112bf565b67ffffffffffffffff811115611a3457611a3361138f565b5b611a3e8254611835565b611a49828285611985565b600060209050601f831160018114611a7c5760008415611a6a578287015190505b611a7485826119f6565b865550611adc565b601f198416611a8a86611866565b60005b82811015611ab257848901518255600182019150602085019450602081019050611a8d565b86831015611acf5784890151611acb601f8916826119d8565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b1e826117d2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b5057611b4f611ae4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190508181036000830152611ba48185611316565b90508181036020830152611bb88184611316565b90509392505050565b60008154611bce81611835565b611bd881866112ca565b94506001821660008114611bf35760018114611c0957611c3c565b60ff198316865281151560200286019350611c3c565b611c1285611866565b60005b83811015611c3457815481890152600182019150602081019050611c15565b808801955050505b50505092915050565b60006040820190508181036000830152611c5f8185611bc1565b90508181036020830152611c738184611bc1565b9050939250505056fea2646970667358221220c87c97f8ed56a04cd3872b6fd8e8642842ebb28c7f7d3f6aee53b60eca1eb9dc64736f6c63430008100033a26469706673582212206c1606b52be46b2a186c40403ef95e8a67e39ea821638c625ca7e064acfdb43e64736f6c63430008100033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000c45760003560e01c8063a2d0095e116200007b578063a2d0095e14620001b9578063c4fd186414620001d9578063d210fee314620001f9578063d488f9a0146200022f578063e2b58e621462000265578063e31db573146200028757620000c4565b80634784336f14620000c9578063531e67e214620000ff578063560873a714620001215780636e1e19211462000141578063893d20e814620001615780639e9e84f91462000183575b600080fd5b620000e76004803603810190620000e19190620016b6565b620002a7565b604051620000f6919062001703565b60405180910390f35b62000109620002f3565b60405162000118919062001731565b60405180910390f35b6200013f6004803603810190620001399190620016b6565b6200031d565b005b6200015f6004803603810190620001599190620016b6565b620003e6565b005b6200016b620004b0565b6040516200017a919062001731565b60405180910390f35b620001a160048036038101906200019b919062001a82565b620004d8565b604051620001b0919062001731565b60405180910390f35b620001d76004803603810190620001d1919062001c4c565b620009a2565b005b620001f76004803603810190620001f1919062001c93565b62000aec565b005b620002176004803603810190620002119190620016b6565b62000d66565b60405162000226919062001e6b565b60405180910390f35b6200024d6004803603810190620002479190620016b6565b62000e35565b6040516200025c919062001fe8565b60405180910390f35b6200026f62001005565b6040516200027e919062001731565b60405180910390f35b620002a560048036038101906200029f91906200200c565b6200102e565b005b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620003a3576040517fadf438e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200046c576040517fadf438e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000808851118015620004ec575060008751115b8015620004fa575060008451115b801562000508575060008351115b801562000516575060008251115b6200054d576040517feaf3bd8900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8251825114801562000560575083518251145b62000597576040517f35e961c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b825181101562000725576000600182620005b59190620020a1565b90505b83518110156200070e57838181518110620005d857620005d7620020dc565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168483815181106200060c576200060b620020dc565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161480620006c05750848181518110620006485762000647620020dc565b5b60200260200101516040516020016200066291906200214d565b604051602081830303815290604052805190602001208583815181106200068e576200068d620020dc565b5b6020026020010151604051602001620006a891906200214d565b60405160208183030381529060405280519060200120145b15620006f8576040517f301cd94e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8080620007059062002166565b915050620005b8565b5080806200071c9062002166565b9150506200059a565b5060468851111562000763576040517f35e961c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600033898989898989896040516200077b9062001542565b6200078e989796959493929190620022c2565b604051809103906000f080158015620007ab573d6000803e3d6000fd5b509050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fb088250606fcd5a658357714719acdeff3339105904ccfd3d66d8e26f79bb7728b8b8b8b8b8b8b604051620008b9979695949392919062002381565b60405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398b6407d82338b8b8b6040518663ffffffff1660e01b8152600401620009269594939291906200242f565b600060405180830381600087803b1580156200094157600080fd5b505af115801562000956573d6000803e3d6000fd5b505050507f35593e44ccbb372b5ae22d5aa930cd9bc26bc2c92af3cf4a5eb072106715b009816040516200098b919062001731565b60405180910390a180915050979650505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000a29576040517e11415300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16637d2ef5e7826040518263ffffffff1660e01b815260040162000a649190620024b2565b600060405180830381600087803b15801562000a7f57600080fd5b505af115801562000a94573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167ff800f6157e7c2af6e3b95f2e5980398b6486bcdb01eed234427f3c60dfc2c4668260405162000ae09190620024b2565b60405180910390a25050565b8373ffffffffffffffffffffffffffffffffffffffff166399ae1ec2336040518263ffffffff1660e01b815260040162000b27919062001731565b602060405180830381865afa15801562000b45573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b6b91906200250c565b62000ba2576040517f473da96a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166399ae1ec2826040518263ffffffff1660e01b815260040162000bdd919062001731565b602060405180830381865afa15801562000bfb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c2191906200250c565b1562000c59576040517fbba97c9c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601e8351111562000c96576040517f35e961c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166319c953df84848460016040518563ffffffff1660e01b815260040162000cd894939291906200254f565b600060405180830381600087803b15801562000cf357600080fd5b505af115801562000d08573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167fca8be768c3e2ef69996f18134c17e8f458e3149408ddf4b162cc2a4c48d871a484848460405162000d5893929190620025aa565b60405180910390a250505050565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801562000e2957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000dde575b50505050509050919050565b60606000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050111562000fa457600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101562000f9857838290600052602060002001805462000f049062002624565b80601f016020809104026020016040519081016040528092919081815260200182805462000f329062002624565b801562000f835780601f1062000f575761010080835404028352916020019162000f83565b820191906000526020600020905b81548152906001019060200180831162000f6557829003601f168201915b50505050508152602001906001019062000ee2565b50505050905062001000565b60008067ffffffffffffffff81111562000fc35762000fc262001769565b5b60405190808252806020026020018201604052801562000ff857816020015b606081526020019060019003908162000fe25790505b509050809150505b919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620010b3576040517e11415300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050036200121c57600167ffffffffffffffff8111156200111c576200111b62001769565b5b6040519080825280602002602001820160405280156200115157816020015b60608152602001906001900390816200113b5790505b50600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190620011a692919062001550565b5080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548110620011fd57620011fc620020dc565b5b90600052602060002001908162001215919062002821565b50620014ed565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490501115620014ec576000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156200137f578382906000526020600020018054620012eb9062002624565b80601f0160208091040260200160405190810160405280929190818152602001828054620013199062002624565b80156200136a5780601f106200133e576101008083540402835291602001916200136a565b820191906000526020600020905b8154815290600101906020018083116200134c57829003601f168201915b505050505081526020019060010190620012c9565b50505050905060005b8151811015620014755782604051602001620013a591906200214d565b60405160208183030381529060405280519060200120828281518110620013d157620013d0620020dc565b5b6020026020010151604051602001620013eb91906200214d565b60405160208183030381529060405280519060200120036200145f578373ffffffffffffffffffffffffffffffffffffffff167fb84b5dc40da8cd280dee1aaf74b3abbd449725a972daf3ad8cbc9d0adc089eff846040516200144f919062002908565b60405180910390a250506200153e565b80806200146c9062002166565b91505062001388565b50600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505060019003906000526020600020016000909190919091509081620014e9919062002821565b50505b5b8173ffffffffffffffffffffffffffffffffffffffff167fb84b5dc40da8cd280dee1aaf74b3abbd449725a972daf3ad8cbc9d0adc089eff8260405162001535919062002908565b60405180910390a25b5050565b612ce1806200292d83390190565b8280548282559060005260206000209081019282156200159d579160200282015b828111156200159c5782518290816200158b919062002821565b509160200191906001019062001571565b5b509050620015ac9190620015b0565b5090565b5b80821115620015d45760008181620015ca9190620015d8565b50600101620015b1565b5090565b508054620015e69062002624565b6000825580601f10620015fa57506200161b565b601f0160209004906000526020600020908101906200161a91906200161e565b5b50565b5b80821115620016395760008160009055506001016200161f565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200167e8262001651565b9050919050565b620016908162001671565b81146200169c57600080fd5b50565b600081359050620016b08162001685565b92915050565b600060208284031215620016cf57620016ce62001647565b5b6000620016df848285016200169f565b91505092915050565b6000819050919050565b620016fd81620016e8565b82525050565b60006020820190506200171a6000830184620016f2565b92915050565b6200172b8162001671565b82525050565b600060208201905062001748600083018462001720565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620017a38262001758565b810181811067ffffffffffffffff82111715620017c557620017c462001769565b5b80604052505050565b6000620017da6200163d565b9050620017e8828262001798565b919050565b600067ffffffffffffffff8211156200180b576200180a62001769565b5b620018168262001758565b9050602081019050919050565b82818337600083830152505050565b6000620018496200184384620017ed565b620017ce565b90508281526020810184848401111562001868576200186762001753565b5b6200187584828562001823565b509392505050565b600082601f8301126200189557620018946200174e565b5b8135620018a784826020860162001832565b91505092915050565b600067ffffffffffffffff821115620018ce57620018cd62001769565b5b602082029050602081019050919050565b600080fd5b6000620018fb620018f584620018b0565b620017ce565b90508083825260208201905060208402830185811115620019215762001920620018df565b5b835b818110156200196f57803567ffffffffffffffff8111156200194a57620019496200174e565b5b8086016200195989826200187d565b8552602085019450505060208101905062001923565b5050509392505050565b600082601f8301126200199157620019906200174e565b5b8135620019a3848260208601620018e4565b91505092915050565b600067ffffffffffffffff821115620019ca57620019c962001769565b5b602082029050602081019050919050565b6000620019f2620019ec84620019ac565b620017ce565b9050808382526020820190506020840283018581111562001a185762001a17620018df565b5b835b8181101562001a45578062001a3088826200169f565b84526020840193505060208101905062001a1a565b5050509392505050565b600082601f83011262001a675762001a666200174e565b5b813562001a79848260208601620019db565b91505092915050565b600080600080600080600060e0888a03121562001aa45762001aa362001647565b5b600088013567ffffffffffffffff81111562001ac55762001ac46200164c565b5b62001ad38a828b016200187d565b975050602088013567ffffffffffffffff81111562001af75762001af66200164c565b5b62001b058a828b016200187d565b965050604088013567ffffffffffffffff81111562001b295762001b286200164c565b5b62001b378a828b016200187d565b955050606088013567ffffffffffffffff81111562001b5b5762001b5a6200164c565b5b62001b698a828b016200187d565b945050608088013567ffffffffffffffff81111562001b8d5762001b8c6200164c565b5b62001b9b8a828b0162001979565b93505060a088013567ffffffffffffffff81111562001bbf5762001bbe6200164c565b5b62001bcd8a828b0162001979565b92505060c088013567ffffffffffffffff81111562001bf15762001bf06200164c565b5b62001bff8a828b0162001a4f565b91505092959891949750929550565b600060ff82169050919050565b62001c268162001c0e565b811462001c3257600080fd5b50565b60008135905062001c468162001c1b565b92915050565b6000806040838503121562001c665762001c6562001647565b5b600062001c76858286016200169f565b925050602062001c898582860162001c35565b9150509250929050565b6000806000806080858703121562001cb05762001caf62001647565b5b600062001cc0878288016200169f565b945050602085013567ffffffffffffffff81111562001ce45762001ce36200164c565b5b62001cf2878288016200187d565b935050604085013567ffffffffffffffff81111562001d165762001d156200164c565b5b62001d24878288016200187d565b925050606062001d37878288016200169f565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b600062001d9a62001d9462001d8e8462001651565b62001d6f565b62001651565b9050919050565b600062001dae8262001d79565b9050919050565b600062001dc28262001da1565b9050919050565b62001dd48162001db5565b82525050565b600062001de8838362001dc9565b60208301905092915050565b6000602082019050919050565b600062001e0e8262001d43565b62001e1a818562001d4e565b935062001e278362001d5f565b8060005b8381101562001e5e57815162001e42888262001dda565b975062001e4f8362001df4565b92505060018101905062001e2b565b5085935050505092915050565b6000602082019050818103600083015262001e87818462001e01565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562001ef757808201518184015260208101905062001eda565b60008484015250505050565b600062001f108262001ebb565b62001f1c818562001ec6565b935062001f2e81856020860162001ed7565b62001f398162001758565b840191505092915050565b600062001f52838362001f03565b905092915050565b6000602082019050919050565b600062001f748262001e8f565b62001f80818562001e9a565b93508360208202850162001f948562001eab565b8060005b8581101562001fd6578484038952815162001fb4858262001f44565b945062001fc18362001f5a565b925060208a0199505060018101905062001f98565b50829750879550505050505092915050565b6000602082019050818103600083015262002004818462001f67565b905092915050565b6000806040838503121562002026576200202562001647565b5b600062002036858286016200169f565b925050602083013567ffffffffffffffff8111156200205a57620020596200164c565b5b62002068858286016200187d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620020ae82620016e8565b9150620020bb83620016e8565b9250828201905080821115620020d657620020d562002072565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b6000620021238262001ebb565b6200212f81856200210b565b93506200214181856020860162001ed7565b80840191505092915050565b60006200215b828462002116565b915081905092915050565b60006200217382620016e8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620021a857620021a762002072565b5b600182019050919050565b600082825260208201905092915050565b6000620021d18262001ebb565b620021dd8185620021b3565b9350620021ef81856020860162001ed7565b620021fa8162001758565b840191505092915050565b600081519050919050565b6000819050602082019050919050565b6200222b8162001671565b82525050565b60006200223f838362002220565b60208301905092915050565b6000602082019050919050565b6000620022658262002205565b62002271818562001d4e565b93506200227e8362002210565b8060005b83811015620022b557815162002299888262002231565b9750620022a6836200224b565b92505060018101905062002282565b5085935050505092915050565b600061010082019050620022da600083018b62001720565b8181036020830152620022ee818a620021c4565b90508181036040830152620023048189620021c4565b905081810360608301526200231a8188620021c4565b90508181036080830152620023308187620021c4565b905081810360a083015262002346818662001f67565b905081810360c08301526200235c818562001f67565b905081810360e083015262002372818462002258565b90509998505050505050505050565b600060e08201905081810360008301526200239d818a620021c4565b90508181036020830152620023b38189620021c4565b90508181036040830152620023c98188620021c4565b90508181036060830152620023df8187620021c4565b90508181036080830152620023f5818662001f67565b905081810360a08301526200240b818562001f67565b905081810360c083015262002421818462002258565b905098975050505050505050565b600060a08201905062002446600083018862001720565b62002455602083018762001720565b8181036040830152620024698186620021c4565b905081810360608301526200247f8185620021c4565b90508181036080830152620024958184620021c4565b90509695505050505050565b620024ac8162001c0e565b82525050565b6000602082019050620024c96000830184620024a1565b92915050565b60008115159050919050565b620024e681620024cf565b8114620024f257600080fd5b50565b6000815190506200250681620024db565b92915050565b60006020828403121562002525576200252462001647565b5b60006200253584828501620024f5565b91505092915050565b6200254981620024cf565b82525050565b600060808201905081810360008301526200256b8187620021c4565b90508181036020830152620025818186620021c4565b905062002592604083018562001720565b620025a160608301846200253e565b95945050505050565b60006060820190508181036000830152620025c68186620021c4565b90508181036020830152620025dc8185620021c4565b9050620025ed604083018462001720565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200263d57607f821691505b602082108103620026535762002652620025f5565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620026bd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200267e565b620026c986836200267e565b95508019841693508086168417925050509392505050565b600062002702620026fc620026f684620016e8565b62001d6f565b620016e8565b9050919050565b6000819050919050565b6200271e83620026e1565b620027366200272d8262002709565b8484546200268b565b825550505050565b600090565b6200274d6200273e565b6200275a81848462002713565b505050565b5b8181101562002782576200277660008262002743565b60018101905062002760565b5050565b601f821115620027d1576200279b8162002659565b620027a6846200266e565b81016020851015620027b6578190505b620027ce620027c5856200266e565b8301826200275f565b50505b505050565b600082821c905092915050565b6000620027f660001984600802620027d6565b1980831691505092915050565b6000620028118383620027e3565b9150826002028217905092915050565b6200282c8262001ebb565b67ffffffffffffffff81111562002848576200284762001769565b5b62002854825462002624565b6200286182828562002786565b600060209050601f83116001811462002899576000841562002884578287015190505b62002890858262002803565b86555062002900565b601f198416620028a98662002659565b60005b82811015620028d357848901518255600182019150602085019450602081019050620028ac565b86831015620028f35784890151620028ef601f891682620027e3565b8355505b6001600288020188555050505b505050505050565b60006020820190508181036000830152620029248184620021c4565b90509291505056fe60c0604052600080556000600160006101000a81548160ff021916908360ff1602179055506000600760006101000a81548160ff0219169083151502179055503480156200004c57600080fd5b5060405162002ce138038062002ce18339818101604052810190620000729190620009ef565b3373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508773ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508660029081620000eb919062000ddc565b508560039081620000fd919062000ddc565b5084600490816200010f919062000ddc565b50836005908162000121919062000ddc565b5060005b8151811015620001b1576200019b84828151811062000149576200014862000ec3565b5b602002602001015184838151811062000167576200016662000ec3565b5b602002602001015184848151811062000185576200018462000ec3565b5b60200260200101516000620001c060201b60201c565b8080620001a89062000f21565b91505062000125565b50505050505050505062000ffb565b60a05173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000228576040517feee85f7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760009054906101000a900460ff161562000270576040517f6bbe2df800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600284511080620002825750601e8451115b15620002ba576040517ffce3699600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180606001604052808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815250905080600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908162000346919062000ddc565b5060208201518160010190816200035e919062000ddc565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506006839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080815480929190620004209062000f21565b91905055508115620005cc5760006006805480602002602001604051908101604052809291908181526020018280548015620004b257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000467575b5050505050905060005b600054811015620005c9576001151560096000848481518110620004e557620004e462000ec3565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503620005b35760006009600084848151811062000559576200055862000ec3565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b8080620005c09062000f21565b915050620004bc565b50505b8273ffffffffffffffffffffffffffffffffffffffff167fd76352dcc1f8336c0abdec06ee73330eee3e75ba620ba2c87510a25a32439d4e86866040516200061692919062000fc0565b60405180910390a25050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620006668262000639565b9050919050565b620006788162000659565b81146200068457600080fd5b50565b60008151905062000698816200066d565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620006f382620006a8565b810181811067ffffffffffffffff82111715620007155762000714620006b9565b5b80604052505050565b60006200072a62000625565b9050620007388282620006e8565b919050565b600067ffffffffffffffff8211156200075b576200075a620006b9565b5b6200076682620006a8565b9050602081019050919050565b60005b838110156200079357808201518184015260208101905062000776565b60008484015250505050565b6000620007b6620007b0846200073d565b6200071e565b905082815260208101848484011115620007d557620007d4620006a3565b5b620007e284828562000773565b509392505050565b600082601f8301126200080257620008016200069e565b5b8151620008148482602086016200079f565b91505092915050565b600067ffffffffffffffff8211156200083b576200083a620006b9565b5b602082029050602081019050919050565b600080fd5b60006200086862000862846200081d565b6200071e565b905080838252602082019050602084028301858111156200088e576200088d6200084c565b5b835b81811015620008dc57805167ffffffffffffffff811115620008b757620008b66200069e565b5b808601620008c68982620007ea565b8552602085019450505060208101905062000890565b5050509392505050565b600082601f830112620008fe57620008fd6200069e565b5b81516200091084826020860162000851565b91505092915050565b600067ffffffffffffffff821115620009375762000936620006b9565b5b602082029050602081019050919050565b60006200095f620009598462000919565b6200071e565b905080838252602082019050602084028301858111156200098557620009846200084c565b5b835b81811015620009b257806200099d888262000687565b84526020840193505060208101905062000987565b5050509392505050565b600082601f830112620009d457620009d36200069e565b5b8151620009e684826020860162000948565b91505092915050565b600080600080600080600080610100898b03121562000a135762000a126200062f565b5b600062000a238b828c0162000687565b985050602089015167ffffffffffffffff81111562000a475762000a4662000634565b5b62000a558b828c01620007ea565b975050604089015167ffffffffffffffff81111562000a795762000a7862000634565b5b62000a878b828c01620007ea565b965050606089015167ffffffffffffffff81111562000aab5762000aaa62000634565b5b62000ab98b828c01620007ea565b955050608089015167ffffffffffffffff81111562000add5762000adc62000634565b5b62000aeb8b828c01620007ea565b94505060a089015167ffffffffffffffff81111562000b0f5762000b0e62000634565b5b62000b1d8b828c01620008e6565b93505060c089015167ffffffffffffffff81111562000b415762000b4062000634565b5b62000b4f8b828c01620008e6565b92505060e089015167ffffffffffffffff81111562000b735762000b7262000634565b5b62000b818b828c01620009bc565b9150509295985092959890939650565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000be457607f821691505b60208210810362000bfa5762000bf962000b9c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262000c647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000c25565b62000c70868362000c25565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000cbd62000cb762000cb18462000c88565b62000c92565b62000c88565b9050919050565b6000819050919050565b62000cd98362000c9c565b62000cf162000ce88262000cc4565b84845462000c32565b825550505050565b600090565b62000d0862000cf9565b62000d1581848462000cce565b505050565b5b8181101562000d3d5762000d3160008262000cfe565b60018101905062000d1b565b5050565b601f82111562000d8c5762000d568162000c00565b62000d618462000c15565b8101602085101562000d71578190505b62000d8962000d808562000c15565b83018262000d1a565b50505b505050565b600082821c905092915050565b600062000db16000198460080262000d91565b1980831691505092915050565b600062000dcc838362000d9e565b9150826002028217905092915050565b62000de78262000b91565b67ffffffffffffffff81111562000e035762000e02620006b9565b5b62000e0f825462000bcb565b62000e1c82828562000d41565b600060209050601f83116001811462000e54576000841562000e3f578287015190505b62000e4b858262000dbe565b86555062000ebb565b601f19841662000e648662000c00565b60005b8281101562000e8e5784890151825560018201915060208501945060208101905062000e67565b8683101562000eae578489015162000eaa601f89168262000d9e565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000f2e8262000c88565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362000f635762000f6262000ef2565b5b600182019050919050565b600082825260208201905092915050565b600062000f8c8262000b91565b62000f98818562000f6e565b935062000faa81856020860162000773565b62000fb581620006a8565b840191505092915050565b6000604082019050818103600083015262000fdc818562000f7f565b9050818103602083015262000ff2818462000f7f565b90509392505050565b60805160a051611cb26200102f6000396000818161038301528181610ba50152610e0d01526000610f350152611cb26000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806372c0c0a81161009757806399ae1ec21161006657806399ae1ec214610267578063ad60572914610297578063d6781324146102b5578063ee9706ac146102bf57610100565b806372c0c0a8146102055780637b560fc2146102235780637d2ef5e71461022d578063893d20e81461024957610100565b806355d2be82116100d357806355d2be821461017b57806364336fcb1461019957806364fb931b146101b75780637143059f146101d557610100565b806317d7de7c1461010557806319c953df1461012357806354181ded1461013f578063545e1b521461015d575b600080fd5b61010d6102ef565b60405161011a919061134f565b60405180910390f35b61013d60048036038101906101389190611550565b610381565b005b6101476107ea565b604051610154919061134f565b60405180910390f35b61016561087c565b604051610172919061160b565b60405180910390f35b610183610893565b604051610190919061134f565b60405180910390f35b6101a1610925565b6040516101ae919061134f565b60405180910390f35b6101bf6109b7565b6040516101cc9190611635565b60405180910390f35b6101ef60048036038101906101ea9190611650565b6109ce565b6040516101fc919061172d565b60405180910390f35b61020d610ba1565b60405161021a919061175e565b60405180910390f35b61022b610bc9565b005b610247600480360381019061024291906117a5565b610e0b565b005b610251610f31565b60405161025e919061175e565b60405180910390f35b610281600480360381019061027c9190611650565b610f59565b60405161028e9190611635565b60405180910390f35b61029f611003565b6040516102ac91906117eb565b60405180910390f35b6102bd61100c565b005b6102d960048036038101906102d49190611650565b611232565b6040516102e69190611635565b60405180910390f35b6060600280546102fe90611835565b80601f016020809104026020016040519081016040528092919081815260200182805461032a90611835565b80156103775780601f1061034c57610100808354040283529160200191610377565b820191906000526020600020905b81548152906001019060200180831161035a57829003601f168201915b5050505050905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610406576040517feee85f7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760009054906101000a900460ff161561044d576040517f6bbe2df800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028451108061045e5750601e8451115b15610495576040517ffce3699600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180606001604052808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815250905080600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908161051f9190611a12565b5060208201518160010190816105359190611a12565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506006839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000808154809291906105f590611b13565b91905055508115610793576000600680548060200260200160405190810160405280929190818152602001828054801561068457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161063a575b5050505050905060005b6000548110156107905760011515600960008484815181106106b3576106b2611b5b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615150361077d5760006009600084848151811061072357610722611b5b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b808061078890611b13565b91505061068e565b50505b8273ffffffffffffffffffffffffffffffffffffffff167fd76352dcc1f8336c0abdec06ee73330eee3e75ba620ba2c87510a25a32439d4e86866040516107db929190611b8a565b60405180910390a25050505050565b6060600380546107f990611835565b80601f016020809104026020016040519081016040528092919081815260200182805461082590611835565b80156108725780601f1061084757610100808354040283529160200191610872565b820191906000526020600020905b81548152906001019060200180831161085557829003601f168201915b5050505050905090565b6000600160009054906101000a900460ff16905090565b6060600480546108a290611835565b80601f01602080910402602001604051908101604052809291908181526020018280546108ce90611835565b801561091b5780601f106108f05761010080835404028352916020019161091b565b820191906000526020600020905b8154815290600101906020018083116108fe57829003601f168201915b5050505050905090565b60606005805461093490611835565b80601f016020809104026020016040519081016040528092919081815260200182805461096090611835565b80156109ad5780601f10610982576101008083540402835291602001916109ad565b820191906000526020600020905b81548152906001019060200180831161099057829003601f168201915b5050505050905090565b6000600760009054906101000a900460ff16905090565b6109d6611288565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082018054610a3090611835565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5c90611835565b8015610aa95780601f10610a7e57610100808354040283529160200191610aa9565b820191906000526020600020905b815481529060010190602001808311610a8c57829003601f168201915b50505050508152602001600182018054610ac290611835565b80601f0160208091040260200160405190810160405280929190818152602001828054610aee90611835565b8015610b3b5780601f10610b1057610100808354040283529160200191610b3b565b820191906000526020600020905b815481529060010190602001808311610b1e57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000610bd433610f59565b905080610c0d576040517ffccacf3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760009054906101000a900460ff1615610c54576040517f6bbe2df800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503610cde576040517f3b4b7dcf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f26c25af05520e978d353f976c99fa4c277ddc75aed4170ec47c9e24f06e62a1c600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101604051610e00929190611c45565b60405180910390a250565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e90576040517feee85f7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018160ff161080610ea5575060038160ff16115b15610edc576040517ffaa3262300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548160ff021916908360ff1602179055507f12ccb854d432ac960202ac0e6cb78d2bd11a925dd3e9aa4f6ede2705462e509981604051610f26919061160b565b60405180910390a150565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008073ffffffffffffffffffffffffffffffffffffffff16600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610ff95760009050610ffe565b600190505b919050565b60008054905090565b600061101733610f59565b905080611050576040517ffccacf3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760009054906101000a900460ff1615611097576040517f6bbe2df800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600680548060200260200160405190810160405280929190818152602001828054801561111b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116110d1575b5050505050905060005b6000548110156111e657600015156009600084848151811061114a57611149611b5b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515036111d3576040517fadba427200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80806111de90611b13565b915050611125565b506001600760006101000a81548160ff0219169083151502179055507f77b99c173854235e0f45948e541b3d590e15d05c680efbedc9c18bcb845aa01c60405160405180910390a15050565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60405180606001604052806060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600081519050919050565b600082825260208201905092915050565b60005b838110156112f95780820151818401526020810190506112de565b60008484015250505050565b6000601f19601f8301169050919050565b6000611321826112bf565b61132b81856112ca565b935061133b8185602086016112db565b61134481611305565b840191505092915050565b600060208201905081810360008301526113698184611316565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113c782611305565b810181811067ffffffffffffffff821117156113e6576113e561138f565b5b80604052505050565b60006113f9611371565b905061140582826113be565b919050565b600067ffffffffffffffff8211156114255761142461138f565b5b61142e82611305565b9050602081019050919050565b82818337600083830152505050565b600061145d6114588461140a565b6113ef565b9050828152602081018484840111156114795761147861138a565b5b61148484828561143b565b509392505050565b600082601f8301126114a1576114a0611385565b5b81356114b184826020860161144a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114e5826114ba565b9050919050565b6114f5816114da565b811461150057600080fd5b50565b600081359050611512816114ec565b92915050565b60008115159050919050565b61152d81611518565b811461153857600080fd5b50565b60008135905061154a81611524565b92915050565b6000806000806080858703121561156a5761156961137b565b5b600085013567ffffffffffffffff81111561158857611587611380565b5b6115948782880161148c565b945050602085013567ffffffffffffffff8111156115b5576115b4611380565b5b6115c18782880161148c565b93505060406115d287828801611503565b92505060606115e38782880161153b565b91505092959194509250565b600060ff82169050919050565b611605816115ef565b82525050565b600060208201905061162060008301846115fc565b92915050565b61162f81611518565b82525050565b600060208201905061164a6000830184611626565b92915050565b6000602082840312156116665761166561137b565b5b600061167484828501611503565b91505092915050565b600082825260208201905092915050565b6000611699826112bf565b6116a3818561167d565b93506116b38185602086016112db565b6116bc81611305565b840191505092915050565b6116d0816114da565b82525050565b600060608301600083015184820360008601526116f3828261168e565b9150506020830151848203602086015261170d828261168e565b915050604083015161172260408601826116c7565b508091505092915050565b6000602082019050818103600083015261174781846116d6565b905092915050565b611758816114da565b82525050565b6000602082019050611773600083018461174f565b92915050565b611782816115ef565b811461178d57600080fd5b50565b60008135905061179f81611779565b92915050565b6000602082840312156117bb576117ba61137b565b5b60006117c984828501611790565b91505092915050565b6000819050919050565b6117e5816117d2565b82525050565b600060208201905061180060008301846117dc565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061184d57607f821691505b6020821081036118605761185f611806565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026118c87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261188b565b6118d2868361188b565b95508019841693508086168417925050509392505050565b6000819050919050565b600061190f61190a611905846117d2565b6118ea565b6117d2565b9050919050565b6000819050919050565b611929836118f4565b61193d61193582611916565b848454611898565b825550505050565b600090565b611952611945565b61195d818484611920565b505050565b5b818110156119815761197660008261194a565b600181019050611963565b5050565b601f8211156119c65761199781611866565b6119a08461187b565b810160208510156119af578190505b6119c36119bb8561187b565b830182611962565b50505b505050565b600082821c905092915050565b60006119e9600019846008026119cb565b1980831691505092915050565b6000611a0283836119d8565b9150826002028217905092915050565b611a1b826112bf565b67ffffffffffffffff811115611a3457611a3361138f565b5b611a3e8254611835565b611a49828285611985565b600060209050601f831160018114611a7c5760008415611a6a578287015190505b611a7485826119f6565b865550611adc565b601f198416611a8a86611866565b60005b82811015611ab257848901518255600182019150602085019450602081019050611a8d565b86831015611acf5784890151611acb601f8916826119d8565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b1e826117d2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b5057611b4f611ae4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190508181036000830152611ba48185611316565b90508181036020830152611bb88184611316565b90509392505050565b60008154611bce81611835565b611bd881866112ca565b94506001821660008114611bf35760018114611c0957611c3c565b60ff198316865281151560200286019350611c3c565b611c1285611866565b60005b83811015611c3457815481890152600182019150602081019050611c15565b808801955050505b50505092915050565b60006040820190508181036000830152611c5f8185611bc1565b90508181036020830152611c738184611bc1565b9050939250505056fea2646970667358221220c87c97f8ed56a04cd3872b6fd8e8642842ebb28c7f7d3f6aee53b60eca1eb9dc64736f6c63430008100033a26469706673582212206c1606b52be46b2a186c40403ef95e8a67e39ea821638c625ca7e064acfdb43e64736f6c63430008100033",
  "devdoc": {
    "author": "polarzero",
    "details": "This contract is the only one that can create new promises For a successful flow, the following steps are recommended: 1. Deploy the PromiseFactory contract 2. Deploy the verifiers (VerifyStorage, VerifyTwitter) 3. Set the verifiers in the PromiseFactory contract 4. Fund the verifiers with LINK 5. Deploy a new promise contract * Only via the App can the promises be successfully verified by the VerifyStorage contract * If you want to reproduce this verification, you will need your own External Adapter, * and an interface that both encrypt/decrypt the IPFS & Arweave hashes with the same * encryption key. More details in the documentation.",
    "kind": "dev",
    "methods": {
      "addParticipant(address,string,string,address)": {
        "details": "Only a participant of the contract can call this functionIt can only be called if the contract is not locked (the child contract takes care of that)",
        "params": {
          "_partyAddress": "The address of the party",
          "_partyName": "The name of the party",
          "_partyTwitterHandle": "The Twitter handle of the party",
          "_promiseContractAddress": "The address of the promise contract"
        }
      },
      "addTwitterVerifiedUser(address,string)": {
        "details": "Only the verifier contract can call this function, after the account has been verified with the Chainlink Node + External Adapter",
        "params": {
          "_twitterHandle": "The Twitter handle of the verified account",
          "_userAddress": "The address of the user"
        }
      },
      "createPromiseContract(string,string,string,string,string[],string[],address[])": {
        "params": {
          "_arweaveId": "The ID of the zip stored on Arweave",
          "_encryptedProof": "The encrypted string of the promise name, user address, IPFS and Arweave hashes",
          "_ipfsCid": "The CID of the directory stored on IPFS",
          "_partyAddresses": "The addresses specified by the user that will be allowed to interact with the contract",
          "_partyNames": "The names of the parties specified by the user",
          "_partyTwitterHandles": "The Twitter handles of the parties specified by the user",
          "_promiseName": "The name of the contract specified by the user"
        }
      },
      "updateStorageStatus(address,uint8)": {
        "details": "Only the verifier contract can call this function, after the storage has been verified with the Chainlink Node + External AdapterThis step could as well be avoided for better optimization, since VerifyStorage could directly call the PromiseContract to update its status BUT we want to do it this way, because: - it helps us keep this PromiseFactory contract as a mediator, which allows for better event tracking & easier security measures - it is not a major flaw in terms of gas usage, as long as we're deploying on a L2 solution",
        "params": {
          "_promiseContractAddress": "The address of the promise contract",
          "_storageStatus": "The new storage status -> 1 = failed, 2 = IPFS provided & verified, 3 = IPFS + Arweave provided & verified"
        }
      }
    },
    "title": "PromiseFactory",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PromiseFactory__EMPTY_FIELD()": [
        {
          "notice": "Errors"
        }
      ]
    },
    "events": {
      "PromiseContractCreated(address,address,string,string,string,string,string[],string[],address[])": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "addParticipant(address,string,string,address)": {
        "notice": "Add a participant to a promise contract"
      },
      "addTwitterVerifiedUser(address,string)": {
        "notice": "Add a verified Twitter account to the list of verified accounts"
      },
      "constructor": {
        "notice": "Initialize the contract"
      },
      "createPromiseContract(string,string,string,string,string[],string[],address[])": {
        "notice": "Create a new contract and add it to the list of child contracts"
      },
      "getPromiseContractAddresses(address)": {
        "notice": "Getters"
      },
      "setTwitterVerifier(address)": {
        "notice": "Setters"
      },
      "updateStorageStatus(address,uint8)": {
        "notice": "Update the storage status of a promise contract"
      }
    },
    "notice": "This is the factory contract initializing & referencing all promises",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4301,
        "contract": "contracts/PromiseFactory.sol:PromiseFactory",
        "label": "s_twitterVerifier",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4303,
        "contract": "contracts/PromiseFactory.sol:PromiseFactory",
        "label": "s_storageVerifier",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4309,
        "contract": "contracts/PromiseFactory.sol:PromiseFactory",
        "label": "s_promiseContracts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_contract(PromiseContract)4275)dyn_storage)"
      },
      {
        "astId": 4314,
        "contract": "contracts/PromiseFactory.sol:PromiseFactory",
        "label": "s_twitterVerifiedUsers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(PromiseContract)4275)dyn_storage": {
        "base": "t_contract(PromiseContract)4275",
        "encoding": "dynamic_array",
        "label": "contract PromiseContract[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_contract(PromiseContract)4275": {
        "encoding": "inplace",
        "label": "contract PromiseContract",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(PromiseContract)4275)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract PromiseContract[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(PromiseContract)4275)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}