// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PromiseContractCreated extends ethereum.Event {
  get params(): PromiseContractCreated__Params {
    return new PromiseContractCreated__Params(this);
  }
}

export class PromiseContractCreated__Params {
  _event: PromiseContractCreated;

  constructor(event: PromiseContractCreated) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _promiseName(): string {
    return this._event.parameters[2].value.toString();
  }

  get _pdfUri(): string {
    return this._event.parameters[3].value.toString();
  }

  get _partyNames(): Array<string> {
    return this._event.parameters[4].value.toStringArray();
  }

  get _partyTwitterHandles(): Array<string> {
    return this._event.parameters[5].value.toStringArray();
  }

  get _partyAddresses(): Array<Address> {
    return this._event.parameters[6].value.toAddressArray();
  }
}

export class PromiseFactory extends ethereum.SmartContract {
  static bind(address: Address): PromiseFactory {
    return new PromiseFactory("PromiseFactory", address);
  }

  createContract(
    _promiseName: string,
    _pdfUri: string,
    _partyNames: Array<string>,
    _partyTwitterHandles: Array<string>,
    _partyAddresses: Array<Address>
  ): Address {
    let result = super.call(
      "createContract",
      "createContract(string,string,string[],string[],address[]):(address)",
      [
        ethereum.Value.fromString(_promiseName),
        ethereum.Value.fromString(_pdfUri),
        ethereum.Value.fromStringArray(_partyNames),
        ethereum.Value.fromStringArray(_partyTwitterHandles),
        ethereum.Value.fromAddressArray(_partyAddresses)
      ]
    );

    return result[0].toAddress();
  }

  try_createContract(
    _promiseName: string,
    _pdfUri: string,
    _partyNames: Array<string>,
    _partyTwitterHandles: Array<string>,
    _partyAddresses: Array<Address>
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createContract",
      "createContract(string,string,string[],string[],address[]):(address)",
      [
        ethereum.Value.fromString(_promiseName),
        ethereum.Value.fromString(_pdfUri),
        ethereum.Value.fromStringArray(_partyNames),
        ethereum.Value.fromStringArray(_partyTwitterHandles),
        ethereum.Value.fromAddressArray(_partyAddresses)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPromiseContractAddresses(_owner: Address): Array<Address> {
    let result = super.call(
      "getPromiseContractAddresses",
      "getPromiseContractAddresses(address):(address[])",
      [ethereum.Value.fromAddress(_owner)]
    );

    return result[0].toAddressArray();
  }

  try_getPromiseContractAddresses(
    _owner: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getPromiseContractAddresses",
      "getPromiseContractAddresses(address):(address[])",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getPromiseContractCount(_userAddress: Address): BigInt {
    let result = super.call(
      "getPromiseContractCount",
      "getPromiseContractCount(address):(uint256)",
      [ethereum.Value.fromAddress(_userAddress)]
    );

    return result[0].toBigInt();
  }

  try_getPromiseContractCount(
    _userAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPromiseContractCount",
      "getPromiseContractCount(address):(uint256)",
      [ethereum.Value.fromAddress(_userAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  promiseContracts(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "promiseContracts",
      "promiseContracts(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_promiseContracts(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "promiseContracts",
      "promiseContracts(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateContractCall extends ethereum.Call {
  get inputs(): CreateContractCall__Inputs {
    return new CreateContractCall__Inputs(this);
  }

  get outputs(): CreateContractCall__Outputs {
    return new CreateContractCall__Outputs(this);
  }
}

export class CreateContractCall__Inputs {
  _call: CreateContractCall;

  constructor(call: CreateContractCall) {
    this._call = call;
  }

  get _promiseName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _pdfUri(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _partyNames(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }

  get _partyTwitterHandles(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }

  get _partyAddresses(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }
}

export class CreateContractCall__Outputs {
  _call: CreateContractCall;

  constructor(call: CreateContractCall) {
    this._call = call;
  }

  get promiseContractAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
