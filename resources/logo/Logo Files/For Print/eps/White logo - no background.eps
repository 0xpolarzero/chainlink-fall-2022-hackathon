%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2418 628
%%HiResBoundingBox: 0 0 2418 627.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2418 627.12 re
W
q
[0.24 0 0 -0.24 0 627.12] cm
q
0 0 10075 2612.5 re
W*
q
[3.28477 0 0 3.284992 349.78143 199.29187] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
587.09998 45.799999 m
534.89996 45.799999 483.59998 59.599998 438.89996 86.300003 c
395.09998 60.400002 343.79996 45.800003 291.69995 45.800003 c
130.800003 45.799999 0 176.5 0 337.39999 c
0 498.29999 130.800003 629.09998 291.70001 629.09998 c
343.70001 629.09998 394.80002 615.39996 439.40002 588.89996 c
484.00003 615.39996 535.10004 629.09998 587.10004 629.09998 c
748 629.09998 878.80005 498.29999 878.80005 337.39996 c
878.79999 176.5 748 45.799999 587.09998 45.799999 c
h
439.39999 559.90002 m
393.29999 529 358.79999 485.90002 339 436.60004 c
452.70001 550.30005 l
448.39999 553.59998 443.89999 556.79999 439.39999 559.90002 c
h
473.39999 532.70001 m
323.79999 383.20001 l
321.19998 368.20001 319.89999 352.90002 319.89999 337.40002 c
319.89999 333.80002 320 330.20001 320.10001 326.60004 c
498.5 505.70004 l
490.79999 515.29999 482.39999 524.29999 473.39999 532.70001 c
h
514.70001 483.70001 m
323.79999 292.10001 l
326.29999 277.60001 329.89999 263.5 334.69998 249.8 c
533.89996 449 l
528.29999 461 521.90002 472.60001 514.70001 483.70001 c
h
544.59998 421.5 m
345.79999 222.60001 l
351.29999 211.10001 357.59998 200 364.69998 189.3 c
554.79999 379.40002 l
552.5 393.79999 549.09998 407.89999 544.59998 421.5 c
h
380.89999 167.399994 m
388.79999 157.799988 397.39999 148.699997 406.69998 140.099991 c
553.29999 286.70001 l
556.39996 303.20001 558 320.10001 558 337.40002 c
558 339.70001 558 342.00003 557.90002 344.40002 c
380.89999 167.399994 l
h
427.60001 122.800003 m
431.30002 120 435.20001 117.300003 439.10001 114.600006 c
483.70001 143.900009 517.20001 184.90001 537.09998 232.20001 c
427.60001 122.800003 l
h
24.5 337.39999 m
24.5 189.7 144 70.199997 291.70001 70.199997 c
335.90002 70.199997 378.30002 80.5 416.80002 101.199997 c
340.60004 155.799988 296.40002 243.3 296.40002 337.39999 c
296.40002 431.5 341.60001 519 416.79999 573.59998 c
378.19998 594.29999 334.89999 604.59998 291.69998 604.59998 c
144 604.70001 24.5 485.20001 24.5 337.39999 c
h
587.09998 604.70001 m
542.89996 604.70001 500.49997 594.40002 461.99997 573.70001 c
538.19995 519.10004 582.39996 431.60001 582.39996 337.5 c
582.39996 243.39999 538.20001 155.800003 462 101.300003 c
500.60001 80.600006 542.90002 70.300003 587.09998 70.300003 c
734.79999 70.300003 854.29999 189.8 854.29999 337.5 c
854.40002 485.20001 734.90002 604.70001 587.09998 604.70001 c
h
f
Q
q
[82.68853 0 0 82.694115 3841.1038 46.887749] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
2.42 15.38 m
2.42 16.433332 2.793333 17.32 3.54 18.040001 c
4.286666 18.760002 5.2 19.133335 6.28 19.160002 c
7.36 19.160002 8.236667 18.803335 8.91 18.090002 c
9.583333 17.376669 9.926666 16.473335 9.94 15.380002 c
9.94 14.313335 9.606667 13.420002 8.94 12.700002 c
8.273333 11.980001 7.38 11.613335 6.259999 11.600001 c
5.179999 11.600001 4.273333 11.966668 3.539999 12.700002 c
2.806666 13.433335 2.433332 14.326669 2.419999 15.380002 c
2.42 15.38 l
h
6.28 10.520001 m
7.693333 10.520001 8.853334 10.976667 9.76 11.89 c
10.666667 12.803333 11.126667 13.966667 11.14 15.38 c
11.14 16.793333 10.686667 17.953333 9.780001 18.860001 c
8.873334 19.766668 7.706668 20.226667 6.280001 20.24 c
5.493334 20.24 4.763334 20.073334 4.090001 19.74 c
3.416667 19.406666 2.913334 18.953333 2.580001 18.379999 c
2.540001 18.379999 l
2.540001 24.559999 l
1.340001 24.559999 l
1.340001 10.759999 l
2.540001 10.759999 l
2.540001 12.379999 l
2.580001 12.379999 l
2.900001 11.819999 3.400001 11.369999 4.080001 11.029999 c
4.760001 10.689999 5.493334 10.519999 6.280001 10.519999 c
6.28 10.520001 l
h
17.940001 10.520001 m
18.166668 10.520001 18.400002 10.553334 18.640001 10.620001 c
18.500002 11.800001 l
18.353336 11.746668 18.193336 11.720001 18.020002 11.720001 c
17.046669 11.720001 16.303335 12.020001 15.790003 12.620001 c
15.276671 13.22 15.020003 14.000001 15.020002 14.960001 c
15.020002 20 l
13.820003 20 l
13.820003 13.26 l
13.820003 13.126667 13.786669 12.293334 13.720002 10.76 c
14.920002 10.76 l
14.946669 11.68 14.973335 12.22 15.000002 12.38 c
15.693335 11.14 16.673334 10.520001 17.940002 10.520001 c
17.940001 10.520001 l
h
21.16 15.38 m
21.16 16.486668 21.506666 17.393333 22.200001 18.1 c
22.893335 18.806667 23.766668 19.16 24.82 19.16 c
25.913332 19.16 26.796665 18.799999 27.469999 18.08 c
28.143333 17.360001 28.48 16.459999 28.48 15.38 c
28.48 14.313334 28.146666 13.42 27.48 12.7 c
26.813334 11.98 25.92 11.613333 24.799999 11.599999 c
23.719999 11.599999 22.846666 11.959999 22.18 12.679999 c
21.513334 13.4 21.173334 14.299999 21.16 15.379999 c
21.16 15.38 l
h
24.82 10.520001 m
26.233332 10.520001 27.393332 10.980001 28.299999 11.900001 c
29.206667 12.820001 29.666666 13.980001 29.679998 15.380001 c
29.679998 16.806667 29.216665 17.970001 28.289999 18.870001 c
27.363333 19.77 26.206667 20.226667 24.82 20.240002 c
23.366667 20.226667 22.196667 19.760002 21.309999 18.840002 c
20.423332 17.920002 19.973333 16.76667 19.959999 15.380002 c
19.959999 13.953335 20.416666 12.790002 21.33 11.890002 c
22.243334 10.990003 23.406668 10.533336 24.82 10.520002 c
24.82 10.520001 l
h
36.759998 10.520001 m
37.439999 10.520001 38.023331 10.693334 38.509998 11.040001 c
38.996666 11.386668 39.339996 11.880001 39.539997 12.520001 c
39.806664 11.88 40.226665 11.386667 40.799995 11.040001 c
41.373325 10.693335 42.00666 10.520001 42.699997 10.520001 c
45.033329 10.520001 46.199997 11.826667 46.199997 14.440001 c
46.199997 20 l
44.999996 20 l
44.999996 14.5 l
44.999996 12.58 44.226662 11.613334 42.679996 11.6 c
41.746662 11.6 41.046661 11.906667 40.579998 12.520001 c
40.113335 13.133334 39.880001 13.926667 39.879997 14.900001 c
39.879997 20 l
38.679996 20 l
38.679996 14.38 l
38.679996 13.54 38.519997 12.87 38.199997 12.37 c
37.879997 11.87 37.39333 11.613334 36.739998 11.6 c
35.779999 11.6 35.013332 11.936667 34.439999 12.610001 c
33.866665 13.283334 33.57333 14.22 33.559998 15.42 c
33.559998 20 l
32.359997 20 l
32.359997 13.26 l
32.346664 12.806666 32.313332 11.973333 32.259998 10.76 c
33.459999 10.76 l
33.486668 11.746667 33.513332 12.286667 33.540001 12.38 c
33.600002 12.38 l
33.866669 11.806667 34.293335 11.353334 34.880001 11.020001 c
35.466667 10.686667 36.093334 10.520001 36.760002 10.520001 c
36.759998 10.520001 l
h
49.599998 10.76 m
50.799999 10.76 l
50.799999 20 l
49.599998 20 l
49.599998 10.76 l
h
50.200001 6.2 m
50.466667 6.2 50.683334 6.286666 50.850002 6.46 c
51.01667 6.633334 51.100002 6.846667 51.100002 7.1 c
51.100002 7.353333 51.01667 7.566666 50.850002 7.74 c
50.683334 7.913333 50.466667 8 50.200001 8 c
49.946667 8 49.733334 7.913333 49.560001 7.74 c
49.386669 7.566666 49.300003 7.353333 49.300003 7.1 c
49.300003 6.846667 49.386669 6.633334 49.560001 6.46 c
49.733334 6.286666 49.946667 6.2 50.200001 6.2 c
h
56.720001 10.520001 m
58.280003 10.520001 59.360001 11.1 59.960003 12.26 c
58.880001 12.900001 l
58.426666 12.033334 57.706669 11.6 56.720001 11.6 c
56.186668 11.6 55.723335 11.743334 55.330002 12.030001 c
54.936668 12.316668 54.740002 12.666668 54.740002 13.080001 c
54.740002 13.493334 54.90667 13.823334 55.240002 14.070001 c
55.573334 14.316668 56.153336 14.513334 56.980003 14.660001 c
58.206669 14.873334 59.053337 15.190001 59.520004 15.610001 c
59.986671 16.030001 60.220005 16.620001 60.220005 17.380001 c
60.220005 18.246668 59.910004 18.940001 59.290005 19.460001 c
58.670006 19.980001 57.860004 20.240002 56.860004 20.240002 c
55.100006 20.226667 53.866673 19.600002 53.160004 18.360003 c
54.220005 17.640003 l
54.446671 18.10667 54.816673 18.476671 55.330006 18.750004 c
55.843338 19.023336 56.366673 19.160004 56.900005 19.160004 c
57.513336 19.160004 58.020004 18.990004 58.420006 18.650003 c
58.820007 18.310003 59.020008 17.913336 59.020004 17.460003 c
59.020004 17.046669 58.85667 16.706669 58.530003 16.440002 c
58.203335 16.173336 57.493336 15.933336 56.400002 15.720002 c
55.453335 15.533336 54.740002 15.246669 54.260002 14.860003 c
53.780003 14.473336 53.540001 13.913336 53.540001 13.180002 c
53.540001 12.393335 53.84 11.753335 54.440002 11.260002 c
55.040005 10.766669 55.800003 10.520002 56.720001 10.520002 c
56.720001 10.520001 l
h
69.959999 14.6 m
69.959999 13.76 69.646667 13.05 69.019997 12.47 c
68.393326 11.89 67.633331 11.6 66.739998 11.6 c
65.873329 11.6 65.126663 11.89 64.5 12.47 c
63.873337 13.05 63.506672 13.76 63.400002 14.6 c
69.959999 14.6 l
h
66.82 10.520001 m
68.099998 10.520001 69.139999 10.933333 69.940002 11.76 c
70.740005 12.586667 71.146675 13.653334 71.160004 14.96 c
71.160004 15.68 l
63.400002 15.68 l
63.453335 16.719999 63.796669 17.556667 64.43 18.190001 c
65.063332 18.823334 65.886665 19.146667 66.900002 19.16 c
67.526672 19.16 68.123337 19.01 68.690002 18.709999 c
69.256668 18.409998 69.693336 18.013332 70 17.519999 c
70.879997 18.259998 l
70.013329 19.579998 68.679993 20.239998 66.879997 20.239998 c
65.46666 20.226664 64.336662 19.766665 63.489998 18.859999 c
62.643333 17.953333 62.213333 16.786667 62.199997 15.359999 c
62.199997 13.973332 62.636665 12.823332 63.509998 11.909999 c
64.383331 10.996666 65.486664 10.533332 66.82 10.519999 c
66.82 10.520001 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
