%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2382 364
%%HiResBoundingBox: 0 0 2382 363.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2382 363.12 re
W
q
[0.24 0 0 -0.24 0 363.12] cm
q
0 0 9924.999 1508.89978 re
W*
q
[1.640895 0 0 1.639937 276.46313 201.05331] cm
587.09998 45.799999 m
534.89996 45.799999 483.59998 59.599998 438.89996 86.300003 c
395.09998 60.400002 343.79996 45.800003 291.69995 45.800003 c
130.800003 45.799999 0 176.5 0 337.39999 c
0 498.29999 130.800003 629.09998 291.70001 629.09998 c
343.70001 629.09998 394.80002 615.39996 439.40002 588.89996 c
484.00003 615.39996 535.10004 629.09998 587.10004 629.09998 c
748 629.09998 878.80005 498.29999 878.80005 337.39996 c
878.79999 176.5 748 45.799999 587.09998 45.799999 c
h
439.39999 559.90002 m
393.29999 529 358.79999 485.90002 339 436.60004 c
452.70001 550.30005 l
448.39999 553.59998 443.89999 556.79999 439.39999 559.90002 c
h
473.39999 532.70001 m
323.79999 383.20001 l
321.19998 368.20001 319.89999 352.90002 319.89999 337.40002 c
319.89999 333.80002 320 330.20001 320.10001 326.60004 c
498.5 505.70004 l
490.79999 515.29999 482.39999 524.29999 473.39999 532.70001 c
h
514.70001 483.70001 m
323.79999 292.10001 l
326.29999 277.60001 329.89999 263.5 334.69998 249.8 c
533.89996 449 l
528.29999 461 521.90002 472.60001 514.70001 483.70001 c
h
544.59998 421.5 m
345.79999 222.60001 l
351.29999 211.10001 357.59998 200 364.69998 189.3 c
554.79999 379.40002 l
552.5 393.79999 549.09998 407.89999 544.59998 421.5 c
h
380.89999 167.399994 m
388.79999 157.799988 397.39999 148.699997 406.69998 140.099991 c
553.29999 286.70001 l
556.39996 303.20001 558 320.10001 558 337.40002 c
558 339.70001 558 342.00003 557.90002 344.40002 c
380.89999 167.399994 l
h
427.60001 122.800003 m
431.30002 120 435.20001 117.300003 439.10001 114.600006 c
483.70001 143.900009 517.20001 184.90001 537.09998 232.20001 c
427.60001 122.800003 l
h
24.5 337.39999 m
24.5 189.7 144 70.199997 291.70001 70.199997 c
335.90002 70.199997 378.30002 80.5 416.80002 101.199997 c
340.60004 155.799988 296.40002 243.3 296.40002 337.39999 c
296.40002 431.5 341.60001 519 416.79999 573.59998 c
378.19998 594.29999 334.89999 604.59998 291.69998 604.59998 c
144 604.70001 24.5 485.20001 24.5 337.39999 c
h
587.09998 604.70001 m
542.89996 604.70001 500.49997 594.40002 461.99997 573.70001 c
538.19995 519.10004 582.39996 431.60001 582.39996 337.5 c
582.39996 243.39999 538.20001 155.800003 462 101.300003 c
500.60001 80.600006 542.90002 70.300003 587.09998 70.300003 c
734.79999 70.300003 854.29999 189.8 854.29999 337.5 c
854.40002 485.20001 734.90002 604.70001 587.09998 604.70001 c
h
f
Q
q
[41.807854 0 0 41.783432 2223.4758 205.32088] cm
7.9831 20.118641 m
11.813601 20.118641 14.932301 17.084942 14.932301 13.220541 c
14.932301 9.373041 11.813701 6.322241 7.9831 6.322241 c
4.1356 6.322241 1.017 9.373041 1.017 13.220541 c
1.017 17.084942 4.1356 20.118641 7.9831 20.118641 c
7.9831 20.118641 l
h
7.9831 18.8307 m
4.8984 18.8307 2.339 16.322201 2.339 13.2205 c
2.339 10.118799 4.8983 7.6103 7.9831 7.6103 c
11.067699 7.6103 13.5931 10.1188 13.5931 13.2205 c
13.5931 16.322201 11.067699 18.8307 7.9831 18.8307 c
7.9831 18.8307 l
h
28.627153 6.441 m
28.745794 6.441 28.830713 6.508631 28.830713 6.62727 c
28.830713 19.813271 l
28.830713 19.932081 28.745968 19.99971 28.627323 19.99971 c
28.271393 19.99971 l
28.016983 19.99971 27.779703 19.830379 27.457663 19.474461 c
18.542362 8.949461 l
18.542362 19.78046 l
18.542362 19.91605 18.457617 20.000629 18.322021 20.000629 c
17.440662 20.000629 l
17.288122 20.000629 17.220322 19.91605 17.220322 19.78046 c
17.220322 6.644461 l
17.220322 6.525821 17.288118 6.441071 17.423712 6.441071 c
17.983032 6.441071 l
18.101673 6.441071 18.186422 6.491918 18.305061 6.62751 c
27.508461 17.559511 l
27.508461 6.627511 l
27.508461 6.508871 27.576258 6.441071 27.694901 6.441071 c
28.6271 6.441071 l
28.627153 6.441 l
h
42.762695 17.729 m
42.881336 17.81358 42.847443 17.949169 42.694897 18.101709 c
41.440498 19.355909 39.813496 20.118509 37.796597 20.118509 c
33.982998 20.118509 30.864397 17.101709 30.864397 13.237309 c
30.864397 9.38981 33.982998 6.32201 37.796597 6.32201 c
39.728798 6.32201 41.457596 7.06777 42.728798 8.338909 c
42.881336 8.491449 42.898289 8.610099 42.796597 8.69484 c
42.084736 9.288059 l
41.966095 9.38975 41.864395 9.38975 41.745754 9.27111 c
41.033894 8.52552 39.627155 7.610311 37.898254 7.610311 c
34.220253 7.610311 32.186356 10.593411 32.186356 13.237411 c
32.186356 15.915411 34.220257 18.83061 37.898254 18.83061 c
39.627056 18.83061 40.949055 17.949251 41.694855 17.20351 c
41.830444 17.067921 41.932144 17.034019 42.050785 17.135714 c
42.762695 17.729 l
h
55.881069 6.441 m
56.033607 6.441 56.118359 6.508963 56.118359 6.66151 c
56.118359 19.78051 l
56.118359 19.9161 56.05056 20.000679 55.91497 20.000679 c
55.237171 20.000679 l
54.932091 20.000679 54.79649 19.81424 54.79649 19.543049 c
54.79649 13.983749 l
46.23719 13.983749 l
46.23719 19.763449 l
46.23719 19.915989 46.169392 20.000568 46.01685 20.000568 c
45.152439 20.000568 l
44.98278 20.000568 44.914978 19.915989 44.914978 19.763449 c
44.914978 6.661449 l
44.914978 6.508908 44.982777 6.441109 45.135319 6.441109 c
46.016678 6.441109 l
46.152267 6.441109 46.237019 6.508906 46.237019 6.661449 c
46.237019 12.661449 l
54.796318 12.661449 l
54.796318 6.661449 l
54.796318 6.508908 54.864117 6.441109 54.999706 6.441109 c
55.881065 6.441109 l
55.881069 6.441 l
h
71.457832 19.779831 m
71.525627 19.915421 71.492058 20 71.339523 20 c
70.305626 20 l
70.186989 20 70.119186 19.949154 70.068336 19.84746 c
68.881935 17.32206 l
60.695534 17.32206 l
59.509132 19.84746 l
59.458286 19.94915 59.390652 20 59.288792 20 c
58.220993 20 l
58.102352 20 58.034554 19.915421 58.102352 19.779831 c
64.458153 6.508831 l
64.525948 6.390191 64.57679 6.356291 64.661369 6.356291 c
64.898819 6.356291 l
64.983566 6.356291 65.051361 6.390189 65.102211 6.508831 c
71.457832 19.779831 l
h
61.271332 16.1019 m
68.305229 16.1019 l
64.779831 8.6443 l
61.271332 16.1019 l
h
74.610191 6.441 m
73.745781 6.441 l
73.593239 6.441 73.525444 6.508797 73.525444 6.66134 c
73.525444 19.78034 l
73.525444 19.91593 73.593239 20.000509 73.745781 20.000509 c
74.627144 20.000509 l
74.745781 20.000509 74.830536 19.91593 74.830536 19.78034 c
74.830536 6.66134 l
74.830536 6.5088 74.745789 6.441 74.610199 6.441 c
74.610191 6.441 l
h
88.864441 6.441 m
88.983078 6.441 89.068001 6.508631 89.068001 6.62727 c
89.068001 19.813271 l
89.068001 19.932081 88.983253 19.99971 88.864609 19.99971 c
88.508682 19.99971 l
88.254272 19.99971 88.016991 19.830379 87.694954 19.474461 c
78.779655 8.949461 l
78.779655 19.78046 l
78.779655 19.91605 78.694908 20.000629 78.559319 20.000629 c
77.677956 20.000629 l
77.525414 20.000629 77.457619 19.91605 77.457619 19.78046 c
77.457619 6.644461 l
77.457619 6.525821 77.525414 6.441071 77.661011 6.441071 c
78.220329 6.441071 l
78.338966 6.441071 78.423721 6.491918 78.542358 6.62751 c
87.745758 17.559511 l
87.745758 6.627511 l
87.745758 6.508871 87.813553 6.441071 87.932198 6.441071 c
88.864395 6.441071 l
88.864441 6.441 l
h
f
Q
q
[41.808216 0 0 41.783794 6140.1958 205.31308] cm
6.61 6.441 m
9.4236 6.441 11.271 8.9834 11.271 11.0681 c
11.271 13.3054 9.4235 15.7291 6.61 15.7291 c
3.61 15.7291 l
3.61 19.661301 l
3.61 19.864691 3.47441 20.000111 3.28797 20.000111 c
1.49137 20.000111 l
1.32188 20.000111 1.18629 19.864681 1.18629 19.661301 c
1.18629 6.763301 l
1.18629 6.593811 1.32188 6.441271 1.50832 6.441271 c
6.61002 6.441271 l
6.61 6.441 l
h
6.3558 13.39 m
7.949 13.39 8.8473 12.220301 8.8473 11.067801 c
8.8473 9.932401 7.948989 8.7798 6.3558 8.7798 c
3.61 8.7798 l
3.61 13.39 l
6.3558 13.39 l
6.3558 13.39 l
h
23.25366 19.61017 m
23.38925 19.81356 23.287724 20 23.016541 20 c
21.440241 20 l
20.96566 20 20.558882 19.55932 20.406342 19.30508 c
18.067341 15.728781 l
15.219841 15.728781 l
15.219841 19.66098 l
15.219841 19.86437 15.084251 19.99979 14.897811 19.99979 c
13.101211 19.99979 l
12.931722 19.99979 12.796131 19.864361 12.796131 19.66098 c
12.796131 6.76298 l
12.796131 6.593491 12.931721 6.44095 13.118161 6.44095 c
18.524961 6.44095 l
21.304661 6.44095 23.01646 9.01725 23.01646 11.085051 c
23.01646 12.729251 22.033411 14.54265 20.355461 15.322351 c
23.25366 19.61017 l
h
15.220461 8.78 m
15.220792 13.3902 l
18.186691 13.3902 l
19.79689 13.3902 20.576492 12.220699 20.576492 11.0343 c
20.576492 9.8987 19.779882 8.7801 18.186293 8.7801 c
15.220392 8.7801 l
15.220461 8.78 l
h
31.948999 20.118641 m
35.745598 20.118641 38.847298 17.067942 38.847298 13.203541 c
38.847298 9.373041 35.745598 6.322141 31.948997 6.322141 c
28.118498 6.322141 25.016798 9.372941 25.016798 13.203541 c
25.016798 17.06794 28.118498 20.118641 31.948997 20.118641 c
31.948999 20.118641 l
h
31.948999 17.7798 m
29.508299 17.7798 27.440498 15.678101 27.440498 13.203501 c
27.440498 10.745901 29.508299 8.661301 31.948997 8.661301 c
34.389694 8.661301 36.440498 10.745901 36.440498 13.203501 c
36.440498 15.678101 34.389698 17.7798 31.948997 17.7798 c
31.948999 17.7798 l
h
56.322407 6.441 m
56.508846 6.441 56.661556 6.59338 56.661556 6.76286 c
56.661556 19.66086 l
56.661556 19.830351 56.525967 19.99967 56.339355 19.99967 c
54.593754 19.99967 l
54.390366 19.99967 54.254772 19.84729 54.254772 19.66086 c
54.254772 11.44056 l
49.305573 19.271061 l
49.203712 19.440552 49.102013 19.50835 48.949474 19.50835 c
48.847786 19.50835 l
48.695248 19.50835 48.593548 19.440554 48.491856 19.271061 c
43.559654 11.423561 l
43.559654 19.66106 l
43.559654 19.830551 43.407116 19.99987 43.220673 19.99987 c
41.474873 19.99987 l
41.288433 19.99987 41.135891 19.84749 41.135891 19.66106 c
41.135891 6.763061 l
41.135891 6.593571 41.271481 6.441031 41.474873 6.441031 c
42.932472 6.441031 l
43.101963 6.441031 43.220612 6.508828 43.322304 6.66137 c
48.898605 15.474771 l
54.491806 6.66137 l
54.576553 6.50883 54.695194 6.441031 54.881638 6.441031 c
56.322338 6.441031 l
56.322407 6.441 l
h
61.288002 6.441 m
59.610203 6.441 l
59.423763 6.441 59.288174 6.59354 59.288174 6.76303 c
59.288174 19.66103 l
59.288174 19.847469 59.440712 19.99984 59.627155 19.99984 c
61.305157 19.99984 l
61.474487 19.99984 61.627018 19.830509 61.627018 19.66103 c
61.627018 6.76303 l
61.627018 6.59354 61.457527 6.441 61.288036 6.441 c
61.288002 6.441 l
h
63.847462 17.644199 m
64.813225 16.5254 l
65.016617 16.287941 65.270851 16.287941 65.457298 16.42354 c
66.016617 16.898121 67.016602 17.79644 68.270897 17.79644 c
69.491196 17.79644 70.542099 17.33864 70.542099 16.28784 c
70.542099 15.18614 69.406502 14.86414 68.237 14.38954 c
65.813301 13.38954 64.050598 12.35564 64.050598 10.15224 c
64.050598 8.42344 65.3218 6.33864 68.389595 6.33864 c
70.474297 6.33864 71.982994 7.52524 72.423698 7.965939 c
72.610138 8.15238 72.711838 8.389669 72.542336 8.59306 c
71.694878 9.711659 l
71.525215 9.931999 71.288101 10.03369 71.016907 9.847249 c
70.474533 9.423519 69.593208 8.643849 68.406708 8.643849 c
67.203308 8.643849 66.457504 9.33877 66.457504 10.15235 c
66.457504 11.050659 67.237167 11.491349 68.508301 11.999849 c
70.7286 12.932389 72.948997 13.932349 72.948997 16.32225 c
72.948997 18.305351 70.983101 20.11865 68.305099 20.11865 c
65.881401 20.11865 64.372902 18.57645 63.9492 18.169651 c
63.796661 18.034061 63.644119 17.847622 63.847511 17.644232 c
63.847462 17.644199 l
h
83.576263 8.78 m
77.406563 8.779669 l
77.406563 12.186469 l
80.728561 12.186469 l
80.915001 12.186469 81.067543 12.339009 81.067543 12.52562 c
81.067543 14.20342 l
81.067543 14.40681 80.931953 14.52562 80.728561 14.52562 c
77.406563 14.52562 l
77.406563 17.661221 l
83.576065 17.661221 l
83.762505 17.661221 83.914879 17.813601 83.914879 18.000031 c
83.914879 19.661331 l
83.914879 19.847771 83.762497 20.000141 83.576065 20.000141 c
75.321869 20.000141 l
75.135429 20.000141 74.982887 19.847761 74.982887 19.661331 c
74.982887 6.763331 l
74.982887 6.593842 75.118477 6.441301 75.305084 6.441301 c
83.576286 6.441301 l
83.762726 6.441301 83.9151 6.593842 83.9151 6.763331 c
83.9151 8.458231 l
83.9151 8.644671 83.762718 8.780261 83.576286 8.780261 c
83.576263 8.78 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
