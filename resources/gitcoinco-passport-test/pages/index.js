import TwitterVerificationAPI from '../components/TwitterVerificationAPI';
import { ConnectButton } from '@rainbow-me/rainbowkit';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useEffect, useState } from 'react';
import { useAccount, useProvider, useSignMessage } from 'wagmi';
import { ethers } from 'ethers';

import { twitterAuthorize, twitterVerify } from '@cyberlab/social-verifier';

const Home = () => {
  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          name='description'
          content='Generated by @rainbow-me/create-rainbowkit'
        />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
        <TwitterVerification />
        <TwitterVerificationAPI />
      </main>

      <footer className={styles.footer}>
        <a href='https://rainbow.me' target='_blank' rel='noopener noreferrer'>
          Made with ❤️ by your frens at 🌈
        </a>
      </footer>
    </div>
  );
};

export default Home;

// -----------------------------------------------------------------------
const TwitterVerification = () => {
  const { address } = useAccount();
  const [signature, setSignature] = useState(null);
  const [message, setMessage] = useState('');

  const { data, isLoading, signMessage } = useSignMessage({
    message: "I'm verifying my Twitter account with handle testAcc09617400.",
  });

  const getSignature = async () => {
    const sig = await twitterAuthorize(
      window.ethereum,
      address,
      'testAcc09617400',
    );
    console.log(sig);
    const text = `Signature: ${sig}!`;
    signMessage();

    window.open(`https://twitter.com/intent/tweet?text=${text}`, '_blank');
  };

  const verifySignature = async () => {
    try {
      const verif = await twitterVerify(address, 'testAcc09617400');
      console.log(verif);
    } catch (err) {
      console.log('error: ', err.message);
    }
  };

  useEffect(() => {
    if (data) {
      console.log(data);
    }
  }, [isLoading]);

  return (
    <div>
      <button onClick={getSignature}>Verify</button>
      <button onClick={verifySignature}>Check</button>
    </div>
  );
};

// -----------------------------------------------------------------------

import { PassportReader } from '@gitcoinco/passport-sdk-reader';

const reader = new PassportReader('https://ceramic-clay.3boxlabs.com', '1');

const GitcoinPassport = () => {
  const [verifier, setVerifier] = useState(null);
  const [scorer, setScorer] = useState(null);
  const [score, setScore] = useState(0);
  const { address } = useAccount();

  const init = async () => {
    const ver = await import('@gitcoinco/passport-sdk-verifier');
    const sco = await import('@gitcoinco/passport-sdk-scorer');
    setVerifier(new ver.PassportVerifier());
    setScorer(sco);
  };

  const getData = async () => {
    const passport = await reader.getPassport(address);
    console.log('passport: ', passport);
    const verified = await verifier.verifyPassport(address, passport);
    console.log('verified: ', verified);

    const scorerI = new scorer.PassportScorer(
      [
        {
          provider: 'Ens',
          issuer: 'did:key:z6MkghvGHLobLEdj1bgRLhS4LPGJAvbMA1tn2zcRyqmYU5LC',
          score: 1,
        },
        {
          provider: 'Twitter',
          issuer: 'did:key:z6MkghvGHLobLEdj1bgRLhS4LPGJAvbMA1tn2zcRyqmYU5LC',
          score: 1,
        },
        {
          provider: 'Google',
          issue: 'did:key:z6MkghvGHLobLEdj1bgRLhS4LPGJAvbMA1tn2zcRyqmYU5LC',
          score: 1,
        },
      ],
      'https://ceramic.passport-iam.gitcoin.co',
      '1',
    );
    const score = await scorerI.getScore(address, passport);
    console.log('score: ', score);
    setScore(score);
  };

  useEffect(() => {
    init();
  }, []);

  useEffect(() => {
    if (address && verifier) {
      getData();
    }
  }, [address, verifier]);
};
