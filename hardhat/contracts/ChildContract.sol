// SPDX-License-Identifier: MIT
pragma solidity ^0.8.16;

/**
 * @author polarzero
 * @title Child Contract
 * @notice This is the child contract generated by the master contract
 * once a user creates a new agreement
 */

contract ChildContract {
    /// Types
    struct Participant {
        string participantName;
        string participantTwitterHandle;
        address participantAddress;
    }

    /// Variables
    uint256 public s_participantCount;
    string public s_agreementName;
    string public s_pdfUri;
    address public immutable i_owner;

    // Create a mapping of addresses to name & twitter handle
    mapping(address => Participant) public s_parties;

    /// Events
    event ParticipantCreated(
        string _participantName,
        string _participantTwitterHandle,
        address _participantAddress
    );

    /// Modifiers
    modifier onlyParties() {
        bool isParty = false;

        // Loop through the parties and check if the sender is a party
        for (uint256 i = 0; i < s_participantCount; i++) {
            if (s_parties[msg.sender].participantAddress == msg.sender) {
                isParty = true;
                break;
            }
        }

        require(isParty, "You are not allowed to interact with this contract");
        _;
    }

    /// Functions

    /**
     * @dev Initialize the contract from the Master Contract with the user address as the owner
     */

    constructor(
        address _owner,
        string memory _agreementName,
        string memory _pdfUri,
        string[] memory _partyNames,
        string[] memory _partyTwitterHandles,
        address[] memory _partyAddresses
    ) {
        i_owner = _owner;
        s_agreementName = _agreementName;
        s_pdfUri = _pdfUri;
        s_participantCount = _partyAddresses.length;

        for (uint256 i = 0; i < _partyAddresses.length; i++) {
            createParticipant(
                _partyNames[i],
                _partyTwitterHandles[i],
                _partyAddresses[i]
            );
        }
    }

    function createParticipant(
        string memory _participantName,
        string memory _participantTwitterHandle,
        address _participantAddress
    ) private {
        Participant memory participant = Participant(
            _participantName,
            _participantTwitterHandle,
            _participantAddress
        );
        s_parties[_participantAddress] = participant;

        emit ParticipantCreated(
            _participantName,
            _participantTwitterHandle,
            _participantAddress
        );
    }
}
