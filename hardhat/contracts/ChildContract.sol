// SPDX-License-Identifier: MIT
pragma solidity ^0.8.16;

import "hardhat/console.sol";

/**
 * @author polarzero
 * @title Child Contract
 * @notice This is the child contract generated by the master contract
 * once a user creates a new agreement
 */

contract ChildContract {
    error ChildContract__createParticipant__NOT_PARTICIPANT();

    /// Types
    struct Participant {
        string participantName;
        string participantTwitterHandle;
        address participantAddress;
    }

    /// Variables
    uint256 public s_participantCount;
    string public s_agreementName;
    string public s_pdfUri;
    address public immutable i_owner;

    // Create a mapping of addresses to name & twitter handle
    mapping(address => Participant) public s_parties;

    /// Events
    event ParticipantCreated(
        string _participantName,
        string _participantTwitterHandle,
        address _participantAddress
    );

    /// Modifiers
    modifier onlyParticipant() {
        bool isParticipant = false;

        console.log("owner", i_owner, "msg sender", msg.sender);
        if (i_owner == msg.sender) {
            isParticipant = true;
        } else {
            // Loop through the parties and check if the sender is a party
            for (uint256 i = 0; i < s_participantCount; i++) {
                if (s_parties[msg.sender].participantAddress == msg.sender) {
                    isParticipant = true;
                    break;
                }
            }
        }

        if (!isParticipant)
            revert ChildContract__createParticipant__NOT_PARTICIPANT();
        _;
    }

    /// Functions

    /**
     * @dev Initialize the contract from the Master Contract with the user address as the owner
     */

    constructor(
        address _owner,
        string memory _agreementName,
        string memory _pdfUri,
        string[] memory _partyNames,
        string[] memory _partyTwitterHandles,
        address[] memory _partyAddresses
    ) {
        i_owner = _owner;
        s_agreementName = _agreementName;
        s_pdfUri = _pdfUri;
        s_participantCount = _partyAddresses.length;

        for (uint256 i = 0; i < _partyAddresses.length; i++) {
            _createParticipant(
                _partyNames[i],
                _partyTwitterHandles[i],
                _partyAddresses[i]
            );
        }
    }

    function _createParticipant(
        string memory _participantName,
        string memory _participantTwitterHandle,
        address _participantAddress
    ) private {
        Participant memory participant = Participant(
            _participantName,
            _participantTwitterHandle,
            _participantAddress
        );
        s_parties[_participantAddress] = participant;

        emit ParticipantCreated(
            _participantName,
            _participantTwitterHandle,
            _participantAddress
        );
    }

    /// Getters
    function getOwner() public view returns (address) {
        return i_owner;
    }

    function getName() public view returns (string memory) {
        return s_agreementName;
    }

    function getPdfUri() public view returns (string memory) {
        return s_pdfUri;
    }

    function getParticipant(address _participantAddress)
        public
        view
        returns (Participant memory)
    {
        return s_parties[_participantAddress];
    }

    function getParticipantCount() public view returns (uint256) {
        return s_participantCount;
    }
}
